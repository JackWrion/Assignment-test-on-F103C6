
Assignment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d60  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08003e6c  08003e6c  00013e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f28  08003f28  000200d8  2**0
                  CONTENTS
  4 .ARM          00000000  08003f28  08003f28  000200d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003f28  08003f28  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f28  08003f28  00013f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f2c  08003f2c  00013f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  08003f30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000164  200000d8  08004008  000200d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08004008  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6ea  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f53  00000000  00000000  0002b7eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0002d740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c80  00000000  00000000  0002e4d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000183f1  00000000  00000000  0002f150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f1c3  00000000  00000000  00047541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00088b0e  00000000  00000000  00056704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000df212  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  000df264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200000d8 	.word	0x200000d8
 8000128:	00000000 	.word	0x00000000
 800012c:	08003e54 	.word	0x08003e54

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200000dc 	.word	0x200000dc
 8000148:	08003e54 	.word	0x08003e54

0800014c <LED1_OFF>:
int RED3 = 0;
int YELLOW3 = 0;
int GREEN3 = 0;

// GROUP LED1;
void LED1_OFF(){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, SET);
 8000150:	2201      	movs	r2, #1
 8000152:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000156:	4808      	ldr	r0, [pc, #32]	; (8000178 <LED1_OFF+0x2c>)
 8000158:	f001 fce1 	bl	8001b1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, SET);
 800015c:	2201      	movs	r2, #1
 800015e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000162:	4805      	ldr	r0, [pc, #20]	; (8000178 <LED1_OFF+0x2c>)
 8000164:	f001 fcdb 	bl	8001b1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, SET);
 8000168:	2201      	movs	r2, #1
 800016a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800016e:	4802      	ldr	r0, [pc, #8]	; (8000178 <LED1_OFF+0x2c>)
 8000170:	f001 fcd5 	bl	8001b1e <HAL_GPIO_WritePin>
}
 8000174:	bf00      	nop
 8000176:	bd80      	pop	{r7, pc}
 8000178:	40010c00 	.word	0x40010c00

0800017c <RED1_TOGGLE>:

void RED1_TOGGLE(){
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
	if (RED1 == 0){
 8000180:	4b0a      	ldr	r3, [pc, #40]	; (80001ac <RED1_TOGGLE+0x30>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	2b00      	cmp	r3, #0
 8000186:	d109      	bne.n	800019c <RED1_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_RED1_GPIO_Port, LED_RED1_Pin, RESET);
 8000188:	2200      	movs	r2, #0
 800018a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800018e:	4808      	ldr	r0, [pc, #32]	; (80001b0 <RED1_TOGGLE+0x34>)
 8000190:	f001 fcc5 	bl	8001b1e <HAL_GPIO_WritePin>
		RED1 = 1;
 8000194:	4b05      	ldr	r3, [pc, #20]	; (80001ac <RED1_TOGGLE+0x30>)
 8000196:	2201      	movs	r2, #1
 8000198:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		RED1 = 0;
	}
}
 800019a:	e004      	b.n	80001a6 <RED1_TOGGLE+0x2a>
		LED1_OFF();
 800019c:	f7ff ffd6 	bl	800014c <LED1_OFF>
		RED1 = 0;
 80001a0:	4b02      	ldr	r3, [pc, #8]	; (80001ac <RED1_TOGGLE+0x30>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
}
 80001a6:	bf00      	nop
 80001a8:	bd80      	pop	{r7, pc}
 80001aa:	bf00      	nop
 80001ac:	200000f4 	.word	0x200000f4
 80001b0:	40010c00 	.word	0x40010c00

080001b4 <YELLOW1_TOGGLE>:
void YELLOW1_TOGGLE(){
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
	if (YELLOW1 == 0){
 80001b8:	4b0a      	ldr	r3, [pc, #40]	; (80001e4 <YELLOW1_TOGGLE+0x30>)
 80001ba:	681b      	ldr	r3, [r3, #0]
 80001bc:	2b00      	cmp	r3, #0
 80001be:	d109      	bne.n	80001d4 <YELLOW1_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_YELLOW1_GPIO_Port, LED_YELLOW1_Pin, RESET);
 80001c0:	2200      	movs	r2, #0
 80001c2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c6:	4808      	ldr	r0, [pc, #32]	; (80001e8 <YELLOW1_TOGGLE+0x34>)
 80001c8:	f001 fca9 	bl	8001b1e <HAL_GPIO_WritePin>
		YELLOW1 = 1;
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <YELLOW1_TOGGLE+0x30>)
 80001ce:	2201      	movs	r2, #1
 80001d0:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		YELLOW1 = 0;
	}
}
 80001d2:	e004      	b.n	80001de <YELLOW1_TOGGLE+0x2a>
		LED1_OFF();
 80001d4:	f7ff ffba 	bl	800014c <LED1_OFF>
		YELLOW1 = 0;
 80001d8:	4b02      	ldr	r3, [pc, #8]	; (80001e4 <YELLOW1_TOGGLE+0x30>)
 80001da:	2200      	movs	r2, #0
 80001dc:	601a      	str	r2, [r3, #0]
}
 80001de:	bf00      	nop
 80001e0:	bd80      	pop	{r7, pc}
 80001e2:	bf00      	nop
 80001e4:	200000f8 	.word	0x200000f8
 80001e8:	40010c00 	.word	0x40010c00

080001ec <GREEN1_TOGGLE>:
void GREEN1_TOGGLE(){
 80001ec:	b580      	push	{r7, lr}
 80001ee:	af00      	add	r7, sp, #0
	if (GREEN1 == 0){
 80001f0:	4b0a      	ldr	r3, [pc, #40]	; (800021c <GREEN1_TOGGLE+0x30>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d109      	bne.n	800020c <GREEN1_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_GREEN1_GPIO_Port, LED_GREEN1_Pin, RESET);
 80001f8:	2200      	movs	r2, #0
 80001fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001fe:	4808      	ldr	r0, [pc, #32]	; (8000220 <GREEN1_TOGGLE+0x34>)
 8000200:	f001 fc8d 	bl	8001b1e <HAL_GPIO_WritePin>
		GREEN1 = 1;
 8000204:	4b05      	ldr	r3, [pc, #20]	; (800021c <GREEN1_TOGGLE+0x30>)
 8000206:	2201      	movs	r2, #1
 8000208:	601a      	str	r2, [r3, #0]
	}
	else{
		LED1_OFF();
		GREEN1 = 0;
	}
}
 800020a:	e004      	b.n	8000216 <GREEN1_TOGGLE+0x2a>
		LED1_OFF();
 800020c:	f7ff ff9e 	bl	800014c <LED1_OFF>
		GREEN1 = 0;
 8000210:	4b02      	ldr	r3, [pc, #8]	; (800021c <GREEN1_TOGGLE+0x30>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
}
 8000216:	bf00      	nop
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	200000fc 	.word	0x200000fc
 8000220:	40010c00 	.word	0x40010c00

08000224 <LED2_OFF>:


//GROUP LED2
void LED2_OFF(){
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8000228:	2201      	movs	r2, #1
 800022a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <LED2_OFF+0x2c>)
 8000230:	f001 fc75 	bl	8001b1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8000234:	2201      	movs	r2, #1
 8000236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800023a:	4805      	ldr	r0, [pc, #20]	; (8000250 <LED2_OFF+0x2c>)
 800023c:	f001 fc6f 	bl	8001b1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8000240:	2201      	movs	r2, #1
 8000242:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000246:	4802      	ldr	r0, [pc, #8]	; (8000250 <LED2_OFF+0x2c>)
 8000248:	f001 fc69 	bl	8001b1e <HAL_GPIO_WritePin>
}
 800024c:	bf00      	nop
 800024e:	bd80      	pop	{r7, pc}
 8000250:	40010c00 	.word	0x40010c00

08000254 <RED2_TOGGLE>:

void RED2_TOGGLE(){
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	if (RED2 == 0){
 8000258:	4b0a      	ldr	r3, [pc, #40]	; (8000284 <RED2_TOGGLE+0x30>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	2b00      	cmp	r3, #0
 800025e:	d109      	bne.n	8000274 <RED2_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8000260:	2200      	movs	r2, #0
 8000262:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000266:	4808      	ldr	r0, [pc, #32]	; (8000288 <RED2_TOGGLE+0x34>)
 8000268:	f001 fc59 	bl	8001b1e <HAL_GPIO_WritePin>
		RED2 = 1;
 800026c:	4b05      	ldr	r3, [pc, #20]	; (8000284 <RED2_TOGGLE+0x30>)
 800026e:	2201      	movs	r2, #1
 8000270:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		RED2 = 0;
	}
}
 8000272:	e004      	b.n	800027e <RED2_TOGGLE+0x2a>
		LED2_OFF();
 8000274:	f7ff ffd6 	bl	8000224 <LED2_OFF>
		RED2 = 0;
 8000278:	4b02      	ldr	r3, [pc, #8]	; (8000284 <RED2_TOGGLE+0x30>)
 800027a:	2200      	movs	r2, #0
 800027c:	601a      	str	r2, [r3, #0]
}
 800027e:	bf00      	nop
 8000280:	bd80      	pop	{r7, pc}
 8000282:	bf00      	nop
 8000284:	20000100 	.word	0x20000100
 8000288:	40010c00 	.word	0x40010c00

0800028c <YELLOW2_TOGGLE>:
void YELLOW2_TOGGLE(){
 800028c:	b580      	push	{r7, lr}
 800028e:	af00      	add	r7, sp, #0
	if (YELLOW2 == 0){
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <YELLOW2_TOGGLE+0x30>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d109      	bne.n	80002ac <YELLOW2_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8000298:	2200      	movs	r2, #0
 800029a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800029e:	4808      	ldr	r0, [pc, #32]	; (80002c0 <YELLOW2_TOGGLE+0x34>)
 80002a0:	f001 fc3d 	bl	8001b1e <HAL_GPIO_WritePin>
		YELLOW2 = 1;
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <YELLOW2_TOGGLE+0x30>)
 80002a6:	2201      	movs	r2, #1
 80002a8:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		YELLOW2 = 0;
	}
}
 80002aa:	e004      	b.n	80002b6 <YELLOW2_TOGGLE+0x2a>
		LED2_OFF();
 80002ac:	f7ff ffba 	bl	8000224 <LED2_OFF>
		YELLOW2 = 0;
 80002b0:	4b02      	ldr	r3, [pc, #8]	; (80002bc <YELLOW2_TOGGLE+0x30>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
}
 80002b6:	bf00      	nop
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	20000104 	.word	0x20000104
 80002c0:	40010c00 	.word	0x40010c00

080002c4 <GREEN2_TOGGLE>:
void GREEN2_TOGGLE(){
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	if (GREEN2 == 0){
 80002c8:	4b0a      	ldr	r3, [pc, #40]	; (80002f4 <GREEN2_TOGGLE+0x30>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d109      	bne.n	80002e4 <GREEN2_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 80002d0:	2200      	movs	r2, #0
 80002d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002d6:	4808      	ldr	r0, [pc, #32]	; (80002f8 <GREEN2_TOGGLE+0x34>)
 80002d8:	f001 fc21 	bl	8001b1e <HAL_GPIO_WritePin>
		GREEN2 = 1;
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <GREEN2_TOGGLE+0x30>)
 80002de:	2201      	movs	r2, #1
 80002e0:	601a      	str	r2, [r3, #0]
	}
	else{
		LED2_OFF();
		GREEN2 = 0;
	}
}
 80002e2:	e004      	b.n	80002ee <GREEN2_TOGGLE+0x2a>
		LED2_OFF();
 80002e4:	f7ff ff9e 	bl	8000224 <LED2_OFF>
		GREEN2 = 0;
 80002e8:	4b02      	ldr	r3, [pc, #8]	; (80002f4 <GREEN2_TOGGLE+0x30>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	601a      	str	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000108 	.word	0x20000108
 80002f8:	40010c00 	.word	0x40010c00

080002fc <LED3_OFF>:


//GROUP LED3
void LED3_OFF(){
 80002fc:	b580      	push	{r7, lr}
 80002fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_RED3_GPIO_Port, LED_RED3_Pin, SET);
 8000300:	2201      	movs	r2, #1
 8000302:	2180      	movs	r1, #128	; 0x80
 8000304:	4808      	ldr	r0, [pc, #32]	; (8000328 <LED3_OFF+0x2c>)
 8000306:	f001 fc0a 	bl	8001b1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_YELLOW3_GPIO_Port, LED_YELLOW3_Pin, SET);
 800030a:	2201      	movs	r2, #1
 800030c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000310:	4805      	ldr	r0, [pc, #20]	; (8000328 <LED3_OFF+0x2c>)
 8000312:	f001 fc04 	bl	8001b1e <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED_GREEN3_GPIO_Port, LED_GREEN3_Pin, SET);
 8000316:	2201      	movs	r2, #1
 8000318:	f44f 7100 	mov.w	r1, #512	; 0x200
 800031c:	4802      	ldr	r0, [pc, #8]	; (8000328 <LED3_OFF+0x2c>)
 800031e:	f001 fbfe 	bl	8001b1e <HAL_GPIO_WritePin>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40010c00 	.word	0x40010c00

0800032c <RED3_TOGGLE>:

void RED3_TOGGLE(){
 800032c:	b580      	push	{r7, lr}
 800032e:	af00      	add	r7, sp, #0
	if (RED3 == 0){
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <RED3_TOGGLE+0x2c>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	2b00      	cmp	r3, #0
 8000336:	d108      	bne.n	800034a <RED3_TOGGLE+0x1e>
		HAL_GPIO_WritePin(LED_RED3_GPIO_Port, LED_RED3_Pin, RESET);
 8000338:	2200      	movs	r2, #0
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	4807      	ldr	r0, [pc, #28]	; (800035c <RED3_TOGGLE+0x30>)
 800033e:	f001 fbee 	bl	8001b1e <HAL_GPIO_WritePin>
		RED3 = 1;
 8000342:	4b05      	ldr	r3, [pc, #20]	; (8000358 <RED3_TOGGLE+0x2c>)
 8000344:	2201      	movs	r2, #1
 8000346:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		RED3 = 0;
	}
}
 8000348:	e004      	b.n	8000354 <RED3_TOGGLE+0x28>
		LED3_OFF();
 800034a:	f7ff ffd7 	bl	80002fc <LED3_OFF>
		RED3 = 0;
 800034e:	4b02      	ldr	r3, [pc, #8]	; (8000358 <RED3_TOGGLE+0x2c>)
 8000350:	2200      	movs	r2, #0
 8000352:	601a      	str	r2, [r3, #0]
}
 8000354:	bf00      	nop
 8000356:	bd80      	pop	{r7, pc}
 8000358:	2000010c 	.word	0x2000010c
 800035c:	40010c00 	.word	0x40010c00

08000360 <YELLOW3_TOGGLE>:
void YELLOW3_TOGGLE(){
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
	if (YELLOW3 == 0){
 8000364:	4b0a      	ldr	r3, [pc, #40]	; (8000390 <YELLOW3_TOGGLE+0x30>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d109      	bne.n	8000380 <YELLOW3_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_YELLOW3_GPIO_Port, LED_YELLOW3_Pin, RESET);
 800036c:	2200      	movs	r2, #0
 800036e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000372:	4808      	ldr	r0, [pc, #32]	; (8000394 <YELLOW3_TOGGLE+0x34>)
 8000374:	f001 fbd3 	bl	8001b1e <HAL_GPIO_WritePin>
		YELLOW3 = 1;
 8000378:	4b05      	ldr	r3, [pc, #20]	; (8000390 <YELLOW3_TOGGLE+0x30>)
 800037a:	2201      	movs	r2, #1
 800037c:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		YELLOW3 = 0;
	}
}
 800037e:	e004      	b.n	800038a <YELLOW3_TOGGLE+0x2a>
		LED3_OFF();
 8000380:	f7ff ffbc 	bl	80002fc <LED3_OFF>
		YELLOW3 = 0;
 8000384:	4b02      	ldr	r3, [pc, #8]	; (8000390 <YELLOW3_TOGGLE+0x30>)
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000110 	.word	0x20000110
 8000394:	40010c00 	.word	0x40010c00

08000398 <GREEN3_TOGGLE>:
void GREEN3_TOGGLE(){
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
	if (GREEN3 == 0){
 800039c:	4b0a      	ldr	r3, [pc, #40]	; (80003c8 <GREEN3_TOGGLE+0x30>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	2b00      	cmp	r3, #0
 80003a2:	d109      	bne.n	80003b8 <GREEN3_TOGGLE+0x20>
		HAL_GPIO_WritePin(LED_GREEN3_GPIO_Port, LED_GREEN3_Pin, RESET);
 80003a4:	2200      	movs	r2, #0
 80003a6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003aa:	4808      	ldr	r0, [pc, #32]	; (80003cc <GREEN3_TOGGLE+0x34>)
 80003ac:	f001 fbb7 	bl	8001b1e <HAL_GPIO_WritePin>
		GREEN3 = 1;
 80003b0:	4b05      	ldr	r3, [pc, #20]	; (80003c8 <GREEN3_TOGGLE+0x30>)
 80003b2:	2201      	movs	r2, #1
 80003b4:	601a      	str	r2, [r3, #0]
	}
	else{
		LED3_OFF();
		GREEN3 = 0;
	}
}
 80003b6:	e004      	b.n	80003c2 <GREEN3_TOGGLE+0x2a>
		LED3_OFF();
 80003b8:	f7ff ffa0 	bl	80002fc <LED3_OFF>
		GREEN3 = 0;
 80003bc:	4b02      	ldr	r3, [pc, #8]	; (80003c8 <GREEN3_TOGGLE+0x30>)
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
}
 80003c2:	bf00      	nop
 80003c4:	bd80      	pop	{r7, pc}
 80003c6:	bf00      	nop
 80003c8:	20000114 	.word	0x20000114
 80003cc:	40010c00 	.word	0x40010c00

080003d0 <setTimer1>:
int timer10_flag = 0;
///


//*******
void setTimer1(int duration){
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/CLOCK_TIMER;
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <setTimer1+0x2c>)
 80003dc:	fb82 1203 	smull	r1, r2, r2, r3
 80003e0:	1092      	asrs	r2, r2, #2
 80003e2:	17db      	asrs	r3, r3, #31
 80003e4:	1ad3      	subs	r3, r2, r3
 80003e6:	4a06      	ldr	r2, [pc, #24]	; (8000400 <setTimer1+0x30>)
 80003e8:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 80003ea:	4b06      	ldr	r3, [pc, #24]	; (8000404 <setTimer1+0x34>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
}
 80003f0:	bf00      	nop
 80003f2:	370c      	adds	r7, #12
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bc80      	pop	{r7}
 80003f8:	4770      	bx	lr
 80003fa:	bf00      	nop
 80003fc:	66666667 	.word	0x66666667
 8000400:	20000118 	.word	0x20000118
 8000404:	20000140 	.word	0x20000140

08000408 <setTimer2>:

void setTimer2(int duration){
 8000408:	b480      	push	{r7}
 800040a:	b083      	sub	sp, #12
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/CLOCK_TIMER;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a08      	ldr	r2, [pc, #32]	; (8000434 <setTimer2+0x2c>)
 8000414:	fb82 1203 	smull	r1, r2, r2, r3
 8000418:	1092      	asrs	r2, r2, #2
 800041a:	17db      	asrs	r3, r3, #31
 800041c:	1ad3      	subs	r3, r2, r3
 800041e:	4a06      	ldr	r2, [pc, #24]	; (8000438 <setTimer2+0x30>)
 8000420:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 8000422:	4b06      	ldr	r3, [pc, #24]	; (800043c <setTimer2+0x34>)
 8000424:	2200      	movs	r2, #0
 8000426:	601a      	str	r2, [r3, #0]
}
 8000428:	bf00      	nop
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	66666667 	.word	0x66666667
 8000438:	2000011c 	.word	0x2000011c
 800043c:	20000144 	.word	0x20000144

08000440 <setTimer3>:

void setTimer3(int duration){
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/CLOCK_TIMER;
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	4a08      	ldr	r2, [pc, #32]	; (800046c <setTimer3+0x2c>)
 800044c:	fb82 1203 	smull	r1, r2, r2, r3
 8000450:	1092      	asrs	r2, r2, #2
 8000452:	17db      	asrs	r3, r3, #31
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	4a06      	ldr	r2, [pc, #24]	; (8000470 <setTimer3+0x30>)
 8000458:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 800045a:	4b06      	ldr	r3, [pc, #24]	; (8000474 <setTimer3+0x34>)
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	66666667 	.word	0x66666667
 8000470:	20000120 	.word	0x20000120
 8000474:	20000148 	.word	0x20000148

08000478 <setTimer5>:
void setTimer4(int duration){
	timer4_counter = duration/CLOCK_TIMER;
	timer4_flag = 0;
}

void setTimer5(int duration){
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/CLOCK_TIMER;
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <setTimer5+0x2c>)
 8000484:	fb82 1203 	smull	r1, r2, r2, r3
 8000488:	1092      	asrs	r2, r2, #2
 800048a:	17db      	asrs	r3, r3, #31
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	4a06      	ldr	r2, [pc, #24]	; (80004a8 <setTimer5+0x30>)
 8000490:	6013      	str	r3, [r2, #0]
	timer5_flag = 0;
 8000492:	4b06      	ldr	r3, [pc, #24]	; (80004ac <setTimer5+0x34>)
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	bc80      	pop	{r7}
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	66666667 	.word	0x66666667
 80004a8:	20000128 	.word	0x20000128
 80004ac:	20000150 	.word	0x20000150

080004b0 <timerRun>:
}
//**********



void timerRun(){
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	if (timer1_counter == 1 ){
 80004b4:	4b42      	ldr	r3, [pc, #264]	; (80005c0 <timerRun+0x110>)
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	2b01      	cmp	r3, #1
 80004ba:	d103      	bne.n	80004c4 <timerRun+0x14>
		//BEGIN-TODO
		timer1_flag = 1;
 80004bc:	4b41      	ldr	r3, [pc, #260]	; (80005c4 <timerRun+0x114>)
 80004be:	2201      	movs	r2, #1
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	e004      	b.n	80004ce <timerRun+0x1e>
		//END-TODO
	}
	else timer1_counter--;
 80004c4:	4b3e      	ldr	r3, [pc, #248]	; (80005c0 <timerRun+0x110>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3b01      	subs	r3, #1
 80004ca:	4a3d      	ldr	r2, [pc, #244]	; (80005c0 <timerRun+0x110>)
 80004cc:	6013      	str	r3, [r2, #0]

	if (timer2_counter == 1 ) timer2_flag = 1;
 80004ce:	4b3e      	ldr	r3, [pc, #248]	; (80005c8 <timerRun+0x118>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b01      	cmp	r3, #1
 80004d4:	d103      	bne.n	80004de <timerRun+0x2e>
 80004d6:	4b3d      	ldr	r3, [pc, #244]	; (80005cc <timerRun+0x11c>)
 80004d8:	2201      	movs	r2, #1
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	e004      	b.n	80004e8 <timerRun+0x38>
	else timer2_counter--;
 80004de:	4b3a      	ldr	r3, [pc, #232]	; (80005c8 <timerRun+0x118>)
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	3b01      	subs	r3, #1
 80004e4:	4a38      	ldr	r2, [pc, #224]	; (80005c8 <timerRun+0x118>)
 80004e6:	6013      	str	r3, [r2, #0]

	if (timer3_counter == 1 ) timer3_flag = 1;
 80004e8:	4b39      	ldr	r3, [pc, #228]	; (80005d0 <timerRun+0x120>)
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	2b01      	cmp	r3, #1
 80004ee:	d103      	bne.n	80004f8 <timerRun+0x48>
 80004f0:	4b38      	ldr	r3, [pc, #224]	; (80005d4 <timerRun+0x124>)
 80004f2:	2201      	movs	r2, #1
 80004f4:	601a      	str	r2, [r3, #0]
 80004f6:	e004      	b.n	8000502 <timerRun+0x52>
	else timer3_counter--;
 80004f8:	4b35      	ldr	r3, [pc, #212]	; (80005d0 <timerRun+0x120>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	3b01      	subs	r3, #1
 80004fe:	4a34      	ldr	r2, [pc, #208]	; (80005d0 <timerRun+0x120>)
 8000500:	6013      	str	r3, [r2, #0]

	if (timer4_counter == 1 ) timer4_flag = 1;
 8000502:	4b35      	ldr	r3, [pc, #212]	; (80005d8 <timerRun+0x128>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b01      	cmp	r3, #1
 8000508:	d103      	bne.n	8000512 <timerRun+0x62>
 800050a:	4b34      	ldr	r3, [pc, #208]	; (80005dc <timerRun+0x12c>)
 800050c:	2201      	movs	r2, #1
 800050e:	601a      	str	r2, [r3, #0]
 8000510:	e004      	b.n	800051c <timerRun+0x6c>
	else timer4_counter--;
 8000512:	4b31      	ldr	r3, [pc, #196]	; (80005d8 <timerRun+0x128>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	3b01      	subs	r3, #1
 8000518:	4a2f      	ldr	r2, [pc, #188]	; (80005d8 <timerRun+0x128>)
 800051a:	6013      	str	r3, [r2, #0]

	if (timer5_counter == 1 ) timer5_flag = 1;
 800051c:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <timerRun+0x130>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d103      	bne.n	800052c <timerRun+0x7c>
 8000524:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <timerRun+0x134>)
 8000526:	2201      	movs	r2, #1
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	e004      	b.n	8000536 <timerRun+0x86>
	else timer5_counter--;
 800052c:	4b2c      	ldr	r3, [pc, #176]	; (80005e0 <timerRun+0x130>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	3b01      	subs	r3, #1
 8000532:	4a2b      	ldr	r2, [pc, #172]	; (80005e0 <timerRun+0x130>)
 8000534:	6013      	str	r3, [r2, #0]

	if (timer6_counter == 1 ) timer6_flag = 1;
 8000536:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <timerRun+0x138>)
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	2b01      	cmp	r3, #1
 800053c:	d103      	bne.n	8000546 <timerRun+0x96>
 800053e:	4b2b      	ldr	r3, [pc, #172]	; (80005ec <timerRun+0x13c>)
 8000540:	2201      	movs	r2, #1
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	e004      	b.n	8000550 <timerRun+0xa0>
	else timer6_counter--;
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <timerRun+0x138>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	3b01      	subs	r3, #1
 800054c:	4a26      	ldr	r2, [pc, #152]	; (80005e8 <timerRun+0x138>)
 800054e:	6013      	str	r3, [r2, #0]


	if (timer7_counter == 1 ) timer7_flag = 1;
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <timerRun+0x140>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d103      	bne.n	8000560 <timerRun+0xb0>
 8000558:	4b26      	ldr	r3, [pc, #152]	; (80005f4 <timerRun+0x144>)
 800055a:	2201      	movs	r2, #1
 800055c:	601a      	str	r2, [r3, #0]
 800055e:	e004      	b.n	800056a <timerRun+0xba>
	else timer7_counter--;
 8000560:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <timerRun+0x140>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	3b01      	subs	r3, #1
 8000566:	4a22      	ldr	r2, [pc, #136]	; (80005f0 <timerRun+0x140>)
 8000568:	6013      	str	r3, [r2, #0]

	if (timer8_counter == 1 ) timer8_flag = 1;
 800056a:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <timerRun+0x148>)
 800056c:	681b      	ldr	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d103      	bne.n	800057a <timerRun+0xca>
 8000572:	4b22      	ldr	r3, [pc, #136]	; (80005fc <timerRun+0x14c>)
 8000574:	2201      	movs	r2, #1
 8000576:	601a      	str	r2, [r3, #0]
 8000578:	e004      	b.n	8000584 <timerRun+0xd4>
	else timer8_counter--;
 800057a:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <timerRun+0x148>)
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	3b01      	subs	r3, #1
 8000580:	4a1d      	ldr	r2, [pc, #116]	; (80005f8 <timerRun+0x148>)
 8000582:	6013      	str	r3, [r2, #0]

	if (timer9_counter == 1 ) timer9_flag = 1;
 8000584:	4b1e      	ldr	r3, [pc, #120]	; (8000600 <timerRun+0x150>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d103      	bne.n	8000594 <timerRun+0xe4>
 800058c:	4b1d      	ldr	r3, [pc, #116]	; (8000604 <timerRun+0x154>)
 800058e:	2201      	movs	r2, #1
 8000590:	601a      	str	r2, [r3, #0]
 8000592:	e004      	b.n	800059e <timerRun+0xee>
	else timer9_counter--;
 8000594:	4b1a      	ldr	r3, [pc, #104]	; (8000600 <timerRun+0x150>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3b01      	subs	r3, #1
 800059a:	4a19      	ldr	r2, [pc, #100]	; (8000600 <timerRun+0x150>)
 800059c:	6013      	str	r3, [r2, #0]

	if (timer10_counter == 1 ) timer10_flag = 1;
 800059e:	4b1a      	ldr	r3, [pc, #104]	; (8000608 <timerRun+0x158>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d103      	bne.n	80005ae <timerRun+0xfe>
 80005a6:	4b19      	ldr	r3, [pc, #100]	; (800060c <timerRun+0x15c>)
 80005a8:	2201      	movs	r2, #1
 80005aa:	601a      	str	r2, [r3, #0]
	else timer10_counter--;


}
 80005ac:	e004      	b.n	80005b8 <timerRun+0x108>
	else timer10_counter--;
 80005ae:	4b16      	ldr	r3, [pc, #88]	; (8000608 <timerRun+0x158>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	3b01      	subs	r3, #1
 80005b4:	4a14      	ldr	r2, [pc, #80]	; (8000608 <timerRun+0x158>)
 80005b6:	6013      	str	r3, [r2, #0]
}
 80005b8:	bf00      	nop
 80005ba:	46bd      	mov	sp, r7
 80005bc:	bc80      	pop	{r7}
 80005be:	4770      	bx	lr
 80005c0:	20000118 	.word	0x20000118
 80005c4:	20000140 	.word	0x20000140
 80005c8:	2000011c 	.word	0x2000011c
 80005cc:	20000144 	.word	0x20000144
 80005d0:	20000120 	.word	0x20000120
 80005d4:	20000148 	.word	0x20000148
 80005d8:	20000124 	.word	0x20000124
 80005dc:	2000014c 	.word	0x2000014c
 80005e0:	20000128 	.word	0x20000128
 80005e4:	20000150 	.word	0x20000150
 80005e8:	2000012c 	.word	0x2000012c
 80005ec:	20000154 	.word	0x20000154
 80005f0:	20000130 	.word	0x20000130
 80005f4:	20000158 	.word	0x20000158
 80005f8:	20000134 	.word	0x20000134
 80005fc:	2000015c 	.word	0x2000015c
 8000600:	20000138 	.word	0x20000138
 8000604:	20000160 	.word	0x20000160
 8000608:	2000013c 	.word	0x2000013c
 800060c:	20000164 	.word	0x20000164

08000610 <isButton1Pressed>:


//Thoi gian cua nhan de'
int TimerforKeyPRESS1 = 200;

int isButton1Pressed(){
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
	if (button1_flag == 1){
 8000614:	4b06      	ldr	r3, [pc, #24]	; (8000630 <isButton1Pressed+0x20>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	2b01      	cmp	r3, #1
 800061a:	d104      	bne.n	8000626 <isButton1Pressed+0x16>
		button1_flag = 0;
 800061c:	4b04      	ldr	r3, [pc, #16]	; (8000630 <isButton1Pressed+0x20>)
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
		return 1;
 8000622:	2301      	movs	r3, #1
 8000624:	e000      	b.n	8000628 <isButton1Pressed+0x18>
	}
	else return 0;
 8000626:	2300      	movs	r3, #0
}
 8000628:	4618      	mov	r0, r3
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr
 8000630:	20000168 	.word	0x20000168

08000634 <getKeyInput1>:
//
void getKeyInput1(){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	KeyReg0_1 = KeyReg1_1;
 8000638:	4b24      	ldr	r3, [pc, #144]	; (80006cc <getKeyInput1+0x98>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <getKeyInput1+0x9c>)
 800063e:	6013      	str	r3, [r2, #0]
	KeyReg1_1 = KeyReg2_1;
 8000640:	4b24      	ldr	r3, [pc, #144]	; (80006d4 <getKeyInput1+0xa0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <getKeyInput1+0x98>)
 8000646:	6013      	str	r3, [r2, #0]
	KeyReg2_1 = HAL_GPIO_ReadPin(BUTTON1_GPIO_Port, BUTTON1_Pin);
 8000648:	2102      	movs	r1, #2
 800064a:	4823      	ldr	r0, [pc, #140]	; (80006d8 <getKeyInput1+0xa4>)
 800064c:	f001 fa50 	bl	8001af0 <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	461a      	mov	r2, r3
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <getKeyInput1+0xa0>)
 8000656:	601a      	str	r2, [r3, #0]

	if (KeyReg0_1 == KeyReg1_1 && KeyReg1_1 == KeyReg2_1){
 8000658:	4b1d      	ldr	r3, [pc, #116]	; (80006d0 <getKeyInput1+0x9c>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b1b      	ldr	r3, [pc, #108]	; (80006cc <getKeyInput1+0x98>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	429a      	cmp	r2, r3
 8000662:	d131      	bne.n	80006c8 <getKeyInput1+0x94>
 8000664:	4b19      	ldr	r3, [pc, #100]	; (80006cc <getKeyInput1+0x98>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <getKeyInput1+0xa0>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	429a      	cmp	r2, r3
 800066e:	d12b      	bne.n	80006c8 <getKeyInput1+0x94>

		if (KeyReg2_1 != KeyReg3_1){					//Nhan doi trang thai
 8000670:	4b18      	ldr	r3, [pc, #96]	; (80006d4 <getKeyInput1+0xa0>)
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	4b19      	ldr	r3, [pc, #100]	; (80006dc <getKeyInput1+0xa8>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	429a      	cmp	r2, r3
 800067a:	d012      	beq.n	80006a2 <getKeyInput1+0x6e>
			KeyReg3_1 = KeyReg2_1;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <getKeyInput1+0xa0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a16      	ldr	r2, [pc, #88]	; (80006dc <getKeyInput1+0xa8>)
 8000682:	6013      	str	r3, [r2, #0]
			if (KeyReg2_1 == PRESSED_STATE){			//Neu dang nhan
 8000684:	4b13      	ldr	r3, [pc, #76]	; (80006d4 <getKeyInput1+0xa0>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d103      	bne.n	8000694 <getKeyInput1+0x60>
				button1_flag = 1;
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <getKeyInput1+0xac>)
 800068e:	2201      	movs	r2, #1
 8000690:	601a      	str	r2, [r3, #0]
		}


	}

}
 8000692:	e019      	b.n	80006c8 <getKeyInput1+0x94>
				button1_flag = 0;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <getKeyInput1+0xac>)
 8000696:	2200      	movs	r2, #0
 8000698:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS1 = 200;				//khi release thi RESET nhan de 1 giay
 800069a:	4b12      	ldr	r3, [pc, #72]	; (80006e4 <getKeyInput1+0xb0>)
 800069c:	22c8      	movs	r2, #200	; 0xc8
 800069e:	601a      	str	r2, [r3, #0]
}
 80006a0:	e012      	b.n	80006c8 <getKeyInput1+0x94>
			if(KeyReg2_1 == PRESSED_STATE){			// Neu dang nhan de
 80006a2:	4b0c      	ldr	r3, [pc, #48]	; (80006d4 <getKeyInput1+0xa0>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10e      	bne.n	80006c8 <getKeyInput1+0x94>
				TimerforKeyPRESS1--;
 80006aa:	4b0e      	ldr	r3, [pc, #56]	; (80006e4 <getKeyInput1+0xb0>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	3b01      	subs	r3, #1
 80006b0:	4a0c      	ldr	r2, [pc, #48]	; (80006e4 <getKeyInput1+0xb0>)
 80006b2:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS1 == 0){			// Nhan de thanh cong
 80006b4:	4b0b      	ldr	r3, [pc, #44]	; (80006e4 <getKeyInput1+0xb0>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d105      	bne.n	80006c8 <getKeyInput1+0x94>
					TimerforKeyPRESS1 = 100;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 80006bc:	4b09      	ldr	r3, [pc, #36]	; (80006e4 <getKeyInput1+0xb0>)
 80006be:	2264      	movs	r2, #100	; 0x64
 80006c0:	601a      	str	r2, [r3, #0]
					button1_flag = 1;
 80006c2:	4b07      	ldr	r3, [pc, #28]	; (80006e0 <getKeyInput1+0xac>)
 80006c4:	2201      	movs	r2, #1
 80006c6:	601a      	str	r2, [r3, #0]
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000004 	.word	0x20000004
 80006d0:	20000000 	.word	0x20000000
 80006d4:	20000008 	.word	0x20000008
 80006d8:	40010800 	.word	0x40010800
 80006dc:	2000000c 	.word	0x2000000c
 80006e0:	20000168 	.word	0x20000168
 80006e4:	20000010 	.word	0x20000010

080006e8 <isButton2Pressed>:
//Thoi gian cua nhan de'
int TimerforKeyPRESS2 = 200;



int isButton2Pressed(){
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
	if (button2_flag == 1){
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <isButton2Pressed+0x20>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d104      	bne.n	80006fe <isButton2Pressed+0x16>
		button2_flag = 0;
 80006f4:	4b04      	ldr	r3, [pc, #16]	; (8000708 <isButton2Pressed+0x20>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
		return 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <isButton2Pressed+0x18>
	}
	else return 0;
 80006fe:	2300      	movs	r3, #0
}
 8000700:	4618      	mov	r0, r3
 8000702:	46bd      	mov	sp, r7
 8000704:	bc80      	pop	{r7}
 8000706:	4770      	bx	lr
 8000708:	2000016c 	.word	0x2000016c

0800070c <getKeyInput2>:
//
void getKeyInput2(){
 800070c:	b580      	push	{r7, lr}
 800070e:	af00      	add	r7, sp, #0
	KeyReg0_2 = KeyReg1_2;
 8000710:	4b24      	ldr	r3, [pc, #144]	; (80007a4 <getKeyInput2+0x98>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <getKeyInput2+0x9c>)
 8000716:	6013      	str	r3, [r2, #0]
	KeyReg1_2 = KeyReg2_2;
 8000718:	4b24      	ldr	r3, [pc, #144]	; (80007ac <getKeyInput2+0xa0>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <getKeyInput2+0x98>)
 800071e:	6013      	str	r3, [r2, #0]
	KeyReg2_2 = HAL_GPIO_ReadPin(BUTTON2_GPIO_Port, BUTTON2_Pin);
 8000720:	2120      	movs	r1, #32
 8000722:	4823      	ldr	r0, [pc, #140]	; (80007b0 <getKeyInput2+0xa4>)
 8000724:	f001 f9e4 	bl	8001af0 <HAL_GPIO_ReadPin>
 8000728:	4603      	mov	r3, r0
 800072a:	461a      	mov	r2, r3
 800072c:	4b1f      	ldr	r3, [pc, #124]	; (80007ac <getKeyInput2+0xa0>)
 800072e:	601a      	str	r2, [r3, #0]


	if (KeyReg0_2 == KeyReg1_2 && KeyReg1_2 == KeyReg2_2){
 8000730:	4b1d      	ldr	r3, [pc, #116]	; (80007a8 <getKeyInput2+0x9c>)
 8000732:	681a      	ldr	r2, [r3, #0]
 8000734:	4b1b      	ldr	r3, [pc, #108]	; (80007a4 <getKeyInput2+0x98>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	429a      	cmp	r2, r3
 800073a:	d131      	bne.n	80007a0 <getKeyInput2+0x94>
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <getKeyInput2+0x98>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4b1a      	ldr	r3, [pc, #104]	; (80007ac <getKeyInput2+0xa0>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	429a      	cmp	r2, r3
 8000746:	d12b      	bne.n	80007a0 <getKeyInput2+0x94>

		if (KeyReg2_2 != KeyReg3_2){					//Nhan doi trang thai
 8000748:	4b18      	ldr	r3, [pc, #96]	; (80007ac <getKeyInput2+0xa0>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4b19      	ldr	r3, [pc, #100]	; (80007b4 <getKeyInput2+0xa8>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	429a      	cmp	r2, r3
 8000752:	d012      	beq.n	800077a <getKeyInput2+0x6e>
			KeyReg3_2 = KeyReg2_2;
 8000754:	4b15      	ldr	r3, [pc, #84]	; (80007ac <getKeyInput2+0xa0>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <getKeyInput2+0xa8>)
 800075a:	6013      	str	r3, [r2, #0]
			if (KeyReg2_2 == PRESSED_STATE){			//Neu dang nhan
 800075c:	4b13      	ldr	r3, [pc, #76]	; (80007ac <getKeyInput2+0xa0>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b00      	cmp	r3, #0
 8000762:	d103      	bne.n	800076c <getKeyInput2+0x60>
				button2_flag = 1;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <getKeyInput2+0xac>)
 8000766:	2201      	movs	r2, #1
 8000768:	601a      	str	r2, [r3, #0]
		}


	}

}
 800076a:	e019      	b.n	80007a0 <getKeyInput2+0x94>
				button2_flag = 0;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <getKeyInput2+0xac>)
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS2 = 100;				//khi release thi RESET nhan de 1 giay
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <getKeyInput2+0xb0>)
 8000774:	2264      	movs	r2, #100	; 0x64
 8000776:	601a      	str	r2, [r3, #0]
}
 8000778:	e012      	b.n	80007a0 <getKeyInput2+0x94>
			if(KeyReg2_2 == PRESSED_STATE){			// Neu dang nhan de
 800077a:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <getKeyInput2+0xa0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d10e      	bne.n	80007a0 <getKeyInput2+0x94>
				TimerforKeyPRESS2--;
 8000782:	4b0e      	ldr	r3, [pc, #56]	; (80007bc <getKeyInput2+0xb0>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	3b01      	subs	r3, #1
 8000788:	4a0c      	ldr	r2, [pc, #48]	; (80007bc <getKeyInput2+0xb0>)
 800078a:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS2 == 0){			// Nhan de thanh cong
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <getKeyInput2+0xb0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d105      	bne.n	80007a0 <getKeyInput2+0x94>
					TimerforKeyPRESS2 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 8000794:	4b09      	ldr	r3, [pc, #36]	; (80007bc <getKeyInput2+0xb0>)
 8000796:	2232      	movs	r2, #50	; 0x32
 8000798:	601a      	str	r2, [r3, #0]
					button2_flag = 1;
 800079a:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <getKeyInput2+0xac>)
 800079c:	2201      	movs	r2, #1
 800079e:	601a      	str	r2, [r3, #0]
}
 80007a0:	bf00      	nop
 80007a2:	bd80      	pop	{r7, pc}
 80007a4:	20000018 	.word	0x20000018
 80007a8:	20000014 	.word	0x20000014
 80007ac:	2000001c 	.word	0x2000001c
 80007b0:	40010800 	.word	0x40010800
 80007b4:	20000020 	.word	0x20000020
 80007b8:	2000016c 	.word	0x2000016c
 80007bc:	20000024 	.word	0x20000024

080007c0 <isButton3Pressed>:
//Thoi gian cua nhan de'
int TimerforKeyPRESS3 = 200;



int isButton3Pressed(){
 80007c0:	b480      	push	{r7}
 80007c2:	af00      	add	r7, sp, #0
	if (button3_flag == 1){
 80007c4:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <isButton3Pressed+0x20>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d104      	bne.n	80007d6 <isButton3Pressed+0x16>
		button3_flag = 0;
 80007cc:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <isButton3Pressed+0x20>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
		return 1;
 80007d2:	2301      	movs	r3, #1
 80007d4:	e000      	b.n	80007d8 <isButton3Pressed+0x18>
	}
	else return 0;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000170 	.word	0x20000170

080007e4 <getKeyInput3>:
//
void getKeyInput3(){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
	KeyReg0_3 = KeyReg1_3;
 80007e8:	4b24      	ldr	r3, [pc, #144]	; (800087c <getKeyInput3+0x98>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a24      	ldr	r2, [pc, #144]	; (8000880 <getKeyInput3+0x9c>)
 80007ee:	6013      	str	r3, [r2, #0]
	KeyReg1_3 = KeyReg2_3;
 80007f0:	4b24      	ldr	r3, [pc, #144]	; (8000884 <getKeyInput3+0xa0>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a21      	ldr	r2, [pc, #132]	; (800087c <getKeyInput3+0x98>)
 80007f6:	6013      	str	r3, [r2, #0]
	KeyReg2_3 = HAL_GPIO_ReadPin(BUTTON3_GPIO_Port, BUTTON3_Pin);
 80007f8:	2101      	movs	r1, #1
 80007fa:	4823      	ldr	r0, [pc, #140]	; (8000888 <getKeyInput3+0xa4>)
 80007fc:	f001 f978 	bl	8001af0 <HAL_GPIO_ReadPin>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <getKeyInput3+0xa0>)
 8000806:	601a      	str	r2, [r3, #0]


	if (KeyReg0_3 == KeyReg1_3 && KeyReg1_3 == KeyReg2_3){
 8000808:	4b1d      	ldr	r3, [pc, #116]	; (8000880 <getKeyInput3+0x9c>)
 800080a:	681a      	ldr	r2, [r3, #0]
 800080c:	4b1b      	ldr	r3, [pc, #108]	; (800087c <getKeyInput3+0x98>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	429a      	cmp	r2, r3
 8000812:	d131      	bne.n	8000878 <getKeyInput3+0x94>
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <getKeyInput3+0x98>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <getKeyInput3+0xa0>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	429a      	cmp	r2, r3
 800081e:	d12b      	bne.n	8000878 <getKeyInput3+0x94>

		if (KeyReg2_3 != KeyReg3_3){					//Nhan doi trang thai
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <getKeyInput3+0xa0>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b19      	ldr	r3, [pc, #100]	; (800088c <getKeyInput3+0xa8>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	429a      	cmp	r2, r3
 800082a:	d012      	beq.n	8000852 <getKeyInput3+0x6e>
			KeyReg3_3 = KeyReg2_3;
 800082c:	4b15      	ldr	r3, [pc, #84]	; (8000884 <getKeyInput3+0xa0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a16      	ldr	r2, [pc, #88]	; (800088c <getKeyInput3+0xa8>)
 8000832:	6013      	str	r3, [r2, #0]
			if (KeyReg2_3 == PRESSED_STATE){			//Neu dang nhan
 8000834:	4b13      	ldr	r3, [pc, #76]	; (8000884 <getKeyInput3+0xa0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d103      	bne.n	8000844 <getKeyInput3+0x60>
				button3_flag = 1;
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <getKeyInput3+0xac>)
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
		}


	}

}
 8000842:	e019      	b.n	8000878 <getKeyInput3+0x94>
				button3_flag = 0;
 8000844:	4b12      	ldr	r3, [pc, #72]	; (8000890 <getKeyInput3+0xac>)
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS3 = 100;				//khi release thi RESET nhan de 1 giay
 800084a:	4b12      	ldr	r3, [pc, #72]	; (8000894 <getKeyInput3+0xb0>)
 800084c:	2264      	movs	r2, #100	; 0x64
 800084e:	601a      	str	r2, [r3, #0]
}
 8000850:	e012      	b.n	8000878 <getKeyInput3+0x94>
			if(KeyReg2_3 == PRESSED_STATE){			// Neu dang nhan de
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <getKeyInput3+0xa0>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	2b00      	cmp	r3, #0
 8000858:	d10e      	bne.n	8000878 <getKeyInput3+0x94>
				TimerforKeyPRESS3--;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <getKeyInput3+0xb0>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	3b01      	subs	r3, #1
 8000860:	4a0c      	ldr	r2, [pc, #48]	; (8000894 <getKeyInput3+0xb0>)
 8000862:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS3 == 0){			// Nhan de thanh cong
 8000864:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <getKeyInput3+0xb0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d105      	bne.n	8000878 <getKeyInput3+0x94>
					TimerforKeyPRESS3 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <getKeyInput3+0xb0>)
 800086e:	2232      	movs	r2, #50	; 0x32
 8000870:	601a      	str	r2, [r3, #0]
					button3_flag = 1;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <getKeyInput3+0xac>)
 8000874:	2201      	movs	r2, #1
 8000876:	601a      	str	r2, [r3, #0]
}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2000002c 	.word	0x2000002c
 8000880:	20000028 	.word	0x20000028
 8000884:	20000030 	.word	0x20000030
 8000888:	40010c00 	.word	0x40010c00
 800088c:	20000034 	.word	0x20000034
 8000890:	20000170 	.word	0x20000170
 8000894:	20000038 	.word	0x20000038

08000898 <isButton4Pressed>:
int KeyReg3_4 = NORMAL_STATE;

//Thoi gian cua nhan de'
int TimerforKeyPRESS4 = 200;

int isButton4Pressed(){
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
	if (button4_flag == 1){
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <isButton4Pressed+0x20>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d104      	bne.n	80008ae <isButton4Pressed+0x16>
		button4_flag = 0;
 80008a4:	4b04      	ldr	r3, [pc, #16]	; (80008b8 <isButton4Pressed+0x20>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
		return 1;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e000      	b.n	80008b0 <isButton4Pressed+0x18>
	}
	else return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bc80      	pop	{r7}
 80008b6:	4770      	bx	lr
 80008b8:	20000174 	.word	0x20000174

080008bc <getKeyInput4>:
//
void getKeyInput4(){
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	KeyReg0_4 = KeyReg1_4;
 80008c0:	4b24      	ldr	r3, [pc, #144]	; (8000954 <getKeyInput4+0x98>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a24      	ldr	r2, [pc, #144]	; (8000958 <getKeyInput4+0x9c>)
 80008c6:	6013      	str	r3, [r2, #0]
	KeyReg1_4 = KeyReg2_4;
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <getKeyInput4+0xa0>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <getKeyInput4+0x98>)
 80008ce:	6013      	str	r3, [r2, #0]
	KeyReg2_4 = HAL_GPIO_ReadPin(BUTTONUSER_GPIO_Port,BUTTONUSER_Pin);
 80008d0:	2101      	movs	r1, #1
 80008d2:	4823      	ldr	r0, [pc, #140]	; (8000960 <getKeyInput4+0xa4>)
 80008d4:	f001 f90c 	bl	8001af0 <HAL_GPIO_ReadPin>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <getKeyInput4+0xa0>)
 80008de:	601a      	str	r2, [r3, #0]

	if (KeyReg0_4 == KeyReg1_4 && KeyReg1_4 == KeyReg2_4){
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <getKeyInput4+0x9c>)
 80008e2:	681a      	ldr	r2, [r3, #0]
 80008e4:	4b1b      	ldr	r3, [pc, #108]	; (8000954 <getKeyInput4+0x98>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d131      	bne.n	8000950 <getKeyInput4+0x94>
 80008ec:	4b19      	ldr	r3, [pc, #100]	; (8000954 <getKeyInput4+0x98>)
 80008ee:	681a      	ldr	r2, [r3, #0]
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <getKeyInput4+0xa0>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	429a      	cmp	r2, r3
 80008f6:	d12b      	bne.n	8000950 <getKeyInput4+0x94>

		if (KeyReg2_4 != KeyReg3_4){					//Nhan doi trang thai
 80008f8:	4b18      	ldr	r3, [pc, #96]	; (800095c <getKeyInput4+0xa0>)
 80008fa:	681a      	ldr	r2, [r3, #0]
 80008fc:	4b19      	ldr	r3, [pc, #100]	; (8000964 <getKeyInput4+0xa8>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	429a      	cmp	r2, r3
 8000902:	d012      	beq.n	800092a <getKeyInput4+0x6e>
			KeyReg3_4 = KeyReg2_4;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <getKeyInput4+0xa0>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a16      	ldr	r2, [pc, #88]	; (8000964 <getKeyInput4+0xa8>)
 800090a:	6013      	str	r3, [r2, #0]
			if (KeyReg2_4 == PRESSED_STATE){			//Neu dang nhan
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <getKeyInput4+0xa0>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d103      	bne.n	800091c <getKeyInput4+0x60>
				button4_flag = 1;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <getKeyInput4+0xac>)
 8000916:	2201      	movs	r2, #1
 8000918:	601a      	str	r2, [r3, #0]
		}


	}

}
 800091a:	e019      	b.n	8000950 <getKeyInput4+0x94>
				button4_flag = 0;
 800091c:	4b12      	ldr	r3, [pc, #72]	; (8000968 <getKeyInput4+0xac>)
 800091e:	2200      	movs	r2, #0
 8000920:	601a      	str	r2, [r3, #0]
				TimerforKeyPRESS4 = 100;				//khi release thi RESET nhan de 1 giay
 8000922:	4b12      	ldr	r3, [pc, #72]	; (800096c <getKeyInput4+0xb0>)
 8000924:	2264      	movs	r2, #100	; 0x64
 8000926:	601a      	str	r2, [r3, #0]
}
 8000928:	e012      	b.n	8000950 <getKeyInput4+0x94>
			if(KeyReg2_4 == PRESSED_STATE){			// Neu dang nhan de
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <getKeyInput4+0xa0>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d10e      	bne.n	8000950 <getKeyInput4+0x94>
				TimerforKeyPRESS4--;
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <getKeyInput4+0xb0>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	3b01      	subs	r3, #1
 8000938:	4a0c      	ldr	r2, [pc, #48]	; (800096c <getKeyInput4+0xb0>)
 800093a:	6013      	str	r3, [r2, #0]
				if (TimerforKeyPRESS4 == 0){			// Nhan de thanh cong
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <getKeyInput4+0xb0>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d105      	bne.n	8000950 <getKeyInput4+0x94>
					TimerforKeyPRESS4 = 50;			// Moi 1s nhan de thi RETURN button_flag 1 lan
 8000944:	4b09      	ldr	r3, [pc, #36]	; (800096c <getKeyInput4+0xb0>)
 8000946:	2232      	movs	r2, #50	; 0x32
 8000948:	601a      	str	r2, [r3, #0]
					button4_flag = 1;
 800094a:	4b07      	ldr	r3, [pc, #28]	; (8000968 <getKeyInput4+0xac>)
 800094c:	2201      	movs	r2, #1
 800094e:	601a      	str	r2, [r3, #0]
}
 8000950:	bf00      	nop
 8000952:	bd80      	pop	{r7, pc}
 8000954:	20000040 	.word	0x20000040
 8000958:	2000003c 	.word	0x2000003c
 800095c:	20000044 	.word	0x20000044
 8000960:	40010800 	.word	0x40010800
 8000964:	20000048 	.word	0x20000048
 8000968:	20000174 	.word	0x20000174
 800096c:	2000004c 	.word	0x2000004c

08000970 <fsm_manual_run>:

int status_man = INIT;
int temp_timer = 0;
int checkprint = 0;

void fsm_manual_run(){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

	switch(status_man){
 8000974:	4b62      	ldr	r3, [pc, #392]	; (8000b00 <fsm_manual_run+0x190>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3b65      	subs	r3, #101	; 0x65
 800097a:	2b03      	cmp	r3, #3
 800097c:	f200 80b4 	bhi.w	8000ae8 <fsm_manual_run+0x178>
 8000980:	a201      	add	r2, pc, #4	; (adr r2, 8000988 <fsm_manual_run+0x18>)
 8000982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000986:	bf00      	nop
 8000988:	08000999 	.word	0x08000999
 800098c:	080009f3 	.word	0x080009f3
 8000990:	08000a97 	.word	0x08000a97
 8000994:	08000a45 	.word	0x08000a45

	case INIT:
		if (isButton1Pressed()){
 8000998:	f7ff fe3a 	bl	8000610 <isButton1Pressed>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d008      	beq.n	80009b4 <fsm_manual_run+0x44>
			status_man = MAN_RED;
 80009a2:	4b57      	ldr	r3, [pc, #348]	; (8000b00 <fsm_manual_run+0x190>)
 80009a4:	2266      	movs	r2, #102	; 0x66
 80009a6:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 80009a8:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <fsm_manual_run+0x194>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
			checkprint = 1;
 80009ae:	4b56      	ldr	r3, [pc, #344]	; (8000b08 <fsm_manual_run+0x198>)
 80009b0:	2201      	movs	r2, #1
 80009b2:	601a      	str	r2, [r3, #0]
		}
		if (isButton3Pressed()){
 80009b4:	f7ff ff04 	bl	80007c0 <isButton3Pressed>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	f000 8096 	beq.w	8000aec <fsm_manual_run+0x17c>
			timer_red = 5000;
 80009c0:	4b52      	ldr	r3, [pc, #328]	; (8000b0c <fsm_manual_run+0x19c>)
 80009c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80009c6:	601a      	str	r2, [r3, #0]
			timer_green = 3000;
 80009c8:	4b51      	ldr	r3, [pc, #324]	; (8000b10 <fsm_manual_run+0x1a0>)
 80009ca:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80009ce:	601a      	str	r2, [r3, #0]
			timer_yellow = 2000;
 80009d0:	4b50      	ldr	r3, [pc, #320]	; (8000b14 <fsm_manual_run+0x1a4>)
 80009d2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80009d6:	601a      	str	r2, [r3, #0]
			status_light1 = INIT1;
 80009d8:	4b4f      	ldr	r3, [pc, #316]	; (8000b18 <fsm_manual_run+0x1a8>)
 80009da:	2213      	movs	r2, #19
 80009dc:	601a      	str	r2, [r3, #0]
			status_light2 = INIT2;
 80009de:	4b4f      	ldr	r3, [pc, #316]	; (8000b1c <fsm_manual_run+0x1ac>)
 80009e0:	2217      	movs	r2, #23
 80009e2:	601a      	str	r2, [r3, #0]
			status_man = INIT;
 80009e4:	4b46      	ldr	r3, [pc, #280]	; (8000b00 <fsm_manual_run+0x190>)
 80009e6:	2265      	movs	r2, #101	; 0x65
 80009e8:	601a      	str	r2, [r3, #0]
			checkprint = 1;
 80009ea:	4b47      	ldr	r3, [pc, #284]	; (8000b08 <fsm_manual_run+0x198>)
 80009ec:	2201      	movs	r2, #1
 80009ee:	601a      	str	r2, [r3, #0]
		}
		break;
 80009f0:	e07c      	b.n	8000aec <fsm_manual_run+0x17c>



	case MAN_RED:

		if (isButton1Pressed()){
 80009f2:	f7ff fe0d 	bl	8000610 <isButton1Pressed>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d008      	beq.n	8000a0e <fsm_manual_run+0x9e>
			status_man = MAN_YELLOW;
 80009fc:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <fsm_manual_run+0x190>)
 80009fe:	2268      	movs	r2, #104	; 0x68
 8000a00:	601a      	str	r2, [r3, #0]
			temp_timer = 0;
 8000a02:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <fsm_manual_run+0x194>)
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
			checkprint = 1;
 8000a08:	4b3f      	ldr	r3, [pc, #252]	; (8000b08 <fsm_manual_run+0x198>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed()){
 8000a0e:	f7ff fe6b 	bl	80006e8 <isButton2Pressed>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d005      	beq.n	8000a24 <fsm_manual_run+0xb4>
			temp_timer = temp_timer + 1000;
 8000a18:	4b3a      	ldr	r3, [pc, #232]	; (8000b04 <fsm_manual_run+0x194>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a20:	4a38      	ldr	r2, [pc, #224]	; (8000b04 <fsm_manual_run+0x194>)
 8000a22:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed()){
 8000a24:	f7ff fecc 	bl	80007c0 <isButton3Pressed>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d060      	beq.n	8000af0 <fsm_manual_run+0x180>
			timer_red = temp_timer;
 8000a2e:	4b35      	ldr	r3, [pc, #212]	; (8000b04 <fsm_manual_run+0x194>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4a36      	ldr	r2, [pc, #216]	; (8000b0c <fsm_manual_run+0x19c>)
 8000a34:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000a36:	4b32      	ldr	r3, [pc, #200]	; (8000b00 <fsm_manual_run+0x190>)
 8000a38:	2265      	movs	r2, #101	; 0x65
 8000a3a:	601a      	str	r2, [r3, #0]
			checkprint = 1;
 8000a3c:	4b32      	ldr	r3, [pc, #200]	; (8000b08 <fsm_manual_run+0x198>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a42:	e055      	b.n	8000af0 <fsm_manual_run+0x180>


	case MAN_YELLOW:
		if (isButton1Pressed()){
 8000a44:	f7ff fde4 	bl	8000610 <isButton1Pressed>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d008      	beq.n	8000a60 <fsm_manual_run+0xf0>
			temp_timer = 0;
 8000a4e:	4b2d      	ldr	r3, [pc, #180]	; (8000b04 <fsm_manual_run+0x194>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
			status_man = MAN_GREEN;
 8000a54:	4b2a      	ldr	r3, [pc, #168]	; (8000b00 <fsm_manual_run+0x190>)
 8000a56:	2267      	movs	r2, #103	; 0x67
 8000a58:	601a      	str	r2, [r3, #0]
			checkprint = 1;
 8000a5a:	4b2b      	ldr	r3, [pc, #172]	; (8000b08 <fsm_manual_run+0x198>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed()){
 8000a60:	f7ff fe42 	bl	80006e8 <isButton2Pressed>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d005      	beq.n	8000a76 <fsm_manual_run+0x106>
			temp_timer = temp_timer + 1000;
 8000a6a:	4b26      	ldr	r3, [pc, #152]	; (8000b04 <fsm_manual_run+0x194>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000a72:	4a24      	ldr	r2, [pc, #144]	; (8000b04 <fsm_manual_run+0x194>)
 8000a74:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed()){
 8000a76:	f7ff fea3 	bl	80007c0 <isButton3Pressed>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d039      	beq.n	8000af4 <fsm_manual_run+0x184>
			timer_yellow = temp_timer;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <fsm_manual_run+0x194>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a23      	ldr	r2, [pc, #140]	; (8000b14 <fsm_manual_run+0x1a4>)
 8000a86:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000a88:	4b1d      	ldr	r3, [pc, #116]	; (8000b00 <fsm_manual_run+0x190>)
 8000a8a:	2265      	movs	r2, #101	; 0x65
 8000a8c:	601a      	str	r2, [r3, #0]
			checkprint = 1;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <fsm_manual_run+0x198>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	601a      	str	r2, [r3, #0]
		}
		break;
 8000a94:	e02e      	b.n	8000af4 <fsm_manual_run+0x184>


	case MAN_GREEN:

		if (isButton1Pressed()){
 8000a96:	f7ff fdbb 	bl	8000610 <isButton1Pressed>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d008      	beq.n	8000ab2 <fsm_manual_run+0x142>
			temp_timer = 0;
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <fsm_manual_run+0x194>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
			status_man = INIT;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	; (8000b00 <fsm_manual_run+0x190>)
 8000aa8:	2265      	movs	r2, #101	; 0x65
 8000aaa:	601a      	str	r2, [r3, #0]
			checkprint = 1;
 8000aac:	4b16      	ldr	r3, [pc, #88]	; (8000b08 <fsm_manual_run+0x198>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
		}
		if (isButton2Pressed()){
 8000ab2:	f7ff fe19 	bl	80006e8 <isButton2Pressed>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d005      	beq.n	8000ac8 <fsm_manual_run+0x158>
			temp_timer = temp_timer + 1000;
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <fsm_manual_run+0x194>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000ac4:	4a0f      	ldr	r2, [pc, #60]	; (8000b04 <fsm_manual_run+0x194>)
 8000ac6:	6013      	str	r3, [r2, #0]
		}
		if (isButton3Pressed()){
 8000ac8:	f7ff fe7a 	bl	80007c0 <isButton3Pressed>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d012      	beq.n	8000af8 <fsm_manual_run+0x188>
			timer_green = temp_timer;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	; (8000b04 <fsm_manual_run+0x194>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a0e      	ldr	r2, [pc, #56]	; (8000b10 <fsm_manual_run+0x1a0>)
 8000ad8:	6013      	str	r3, [r2, #0]
			status_man = INIT;
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <fsm_manual_run+0x190>)
 8000adc:	2265      	movs	r2, #101	; 0x65
 8000ade:	601a      	str	r2, [r3, #0]
			checkprint = 1;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <fsm_manual_run+0x198>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	601a      	str	r2, [r3, #0]
		}
		break;
 8000ae6:	e007      	b.n	8000af8 <fsm_manual_run+0x188>

	default:
		break;
 8000ae8:	bf00      	nop
 8000aea:	e006      	b.n	8000afa <fsm_manual_run+0x18a>
		break;
 8000aec:	bf00      	nop
 8000aee:	e004      	b.n	8000afa <fsm_manual_run+0x18a>
		break;
 8000af0:	bf00      	nop
 8000af2:	e002      	b.n	8000afa <fsm_manual_run+0x18a>
		break;
 8000af4:	bf00      	nop
 8000af6:	e000      	b.n	8000afa <fsm_manual_run+0x18a>
		break;
 8000af8:	bf00      	nop
	}

}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000050 	.word	0x20000050
 8000b04:	20000178 	.word	0x20000178
 8000b08:	2000017c 	.word	0x2000017c
 8000b0c:	20000054 	.word	0x20000054
 8000b10:	20000058 	.word	0x20000058
 8000b14:	2000005c 	.word	0x2000005c
 8000b18:	20000064 	.word	0x20000064
 8000b1c:	20000068 	.word	0x20000068

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b09c      	sub	sp, #112	; 0x70
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f000 fc47 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 f8ff 	bl	8000d2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2e:	f000 f9af 	bl	8000e90 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000b32:	f000 f937 	bl	8000da4 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 8000b36:	f000 f981 	bl	8000e3c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000b3a:	4869      	ldr	r0, [pc, #420]	; (8000ce0 <main+0x1c0>)
 8000b3c:	f001 fc72 	bl	8002424 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  //Set up for Pedestrian
  int userButton = 0;
 8000b40:	2300      	movs	r3, #0
 8000b42:	66fb      	str	r3, [r7, #108]	; 0x6c
  LED3_OFF();
 8000b44:	f7ff fbda 	bl	80002fc <LED3_OFF>

  //Set up for start
  setTimer1(250);
 8000b48:	20fa      	movs	r0, #250	; 0xfa
 8000b4a:	f7ff fc41 	bl	80003d0 <setTimer1>
  int one_sec= 3;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	66bb      	str	r3, [r7, #104]	; 0x68

  while (1)
  {
	  //All about FSM
	  fsm_manual_run();		//manual fsm
 8000b52:	f7ff ff0d 	bl	8000970 <fsm_manual_run>
	  light_control_1();	//fsm for traffic light 1
 8000b56:	f000 fb1d 	bl	8001194 <light_control_1>
	  light_control_2();	//fsm for traffic light 2
 8000b5a:	f000 fb91 	bl	8001280 <light_control_2>


	  if (isButton4Pressed()){		// Pedestrian pressed
 8000b5e:	f7ff fe9b 	bl	8000898 <isButton4Pressed>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d005      	beq.n	8000b74 <main+0x54>
		  userButton = 1;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	66fb      	str	r3, [r7, #108]	; 0x6c
		  setTimer5(10000);
 8000b6c:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b70:	f7ff fc82 	bl	8000478 <setTimer5>
	  }
	  if (timer5_flag == 1){		// Time out
 8000b74:	4b5b      	ldr	r3, [pc, #364]	; (8000ce4 <main+0x1c4>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b01      	cmp	r3, #1
 8000b7a:	d103      	bne.n	8000b84 <main+0x64>
		  userButton = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	66fb      	str	r3, [r7, #108]	; 0x6c
		  LED3_OFF();
 8000b80:	f7ff fbbc 	bl	80002fc <LED3_OFF>
	  }


	  if (timer1_flag == 1){		// One duration blinky 250ms
 8000b84:	4b58      	ldr	r3, [pc, #352]	; (8000ce8 <main+0x1c8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b01      	cmp	r3, #1
 8000b8a:	d1e2      	bne.n	8000b52 <main+0x32>
		 setTimer1(250);
 8000b8c:	20fa      	movs	r0, #250	; 0xfa
 8000b8e:	f7ff fc1f 	bl	80003d0 <setTimer1>

		 one_sec++;
 8000b92:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b94:	3301      	adds	r3, #1
 8000b96:	66bb      	str	r3, [r7, #104]	; 0x68
		 if (one_sec == 4){
 8000b98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d118      	bne.n	8000bd0 <main+0xb0>
			one_sec = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	66bb      	str	r3, [r7, #104]	; 0x68
			int time = timer2_counter/100;
 8000ba2:	4b52      	ldr	r3, [pc, #328]	; (8000cec <main+0x1cc>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a52      	ldr	r2, [pc, #328]	; (8000cf0 <main+0x1d0>)
 8000ba8:	fb82 1203 	smull	r1, r2, r2, r3
 8000bac:	1152      	asrs	r2, r2, #5
 8000bae:	17db      	asrs	r3, r3, #31
 8000bb0:	1ad3      	subs	r3, r2, r3
 8000bb2:	667b      	str	r3, [r7, #100]	; 0x64
			char str[100];
			HAL_UART_Transmit(&huart2,(uint8_t*) str, sprintf(str, "!7SEG: %d#\r\n",time), 1000);
 8000bb4:	463b      	mov	r3, r7
 8000bb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000bb8:	494e      	ldr	r1, [pc, #312]	; (8000cf4 <main+0x1d4>)
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f002 fcd0 	bl	8003560 <siprintf>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	b29a      	uxth	r2, r3
 8000bc4:	4639      	mov	r1, r7
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	484b      	ldr	r0, [pc, #300]	; (8000cf8 <main+0x1d8>)
 8000bcc:	f002 f80b 	bl	8002be6 <HAL_UART_Transmit>
		 }

		  //Cum den 1
		  if (RED1_flag){
 8000bd0:	4b4a      	ldr	r3, [pc, #296]	; (8000cfc <main+0x1dc>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d002      	beq.n	8000bde <main+0xbe>
			  RED1_TOGGLE();
 8000bd8:	f7ff fad0 	bl	800017c <RED1_TOGGLE>
 8000bdc:	e00c      	b.n	8000bf8 <main+0xd8>
		  }
		  else if(YELLOW1_flag){
 8000bde:	4b48      	ldr	r3, [pc, #288]	; (8000d00 <main+0x1e0>)
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d002      	beq.n	8000bec <main+0xcc>
			  YELLOW1_TOGGLE();
 8000be6:	f7ff fae5 	bl	80001b4 <YELLOW1_TOGGLE>
 8000bea:	e005      	b.n	8000bf8 <main+0xd8>
		  }
		  else if(GREEN1_flag){
 8000bec:	4b45      	ldr	r3, [pc, #276]	; (8000d04 <main+0x1e4>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <main+0xd8>
			  GREEN1_TOGGLE();
 8000bf4:	f7ff fafa 	bl	80001ec <GREEN1_TOGGLE>
		  }

		  //Cum den 2
		  if(RED2_flag){
 8000bf8:	4b43      	ldr	r3, [pc, #268]	; (8000d08 <main+0x1e8>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d007      	beq.n	8000c10 <main+0xf0>
			  RED2_TOGGLE();
 8000c00:	f7ff fb28 	bl	8000254 <RED2_TOGGLE>
			  if (userButton) RED3_TOGGLE();
 8000c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d019      	beq.n	8000c3e <main+0x11e>
 8000c0a:	f7ff fb8f 	bl	800032c <RED3_TOGGLE>
 8000c0e:	e016      	b.n	8000c3e <main+0x11e>
		  }
		  else if(YELLOW2_flag){
 8000c10:	4b3e      	ldr	r3, [pc, #248]	; (8000d0c <main+0x1ec>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d007      	beq.n	8000c28 <main+0x108>
			  YELLOW2_TOGGLE();
 8000c18:	f7ff fb38 	bl	800028c <YELLOW2_TOGGLE>
			  if (userButton) YELLOW3_TOGGLE();
 8000c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d00d      	beq.n	8000c3e <main+0x11e>
 8000c22:	f7ff fb9d 	bl	8000360 <YELLOW3_TOGGLE>
 8000c26:	e00a      	b.n	8000c3e <main+0x11e>
		  }
		  else if(GREEN2_flag){
 8000c28:	4b39      	ldr	r3, [pc, #228]	; (8000d10 <main+0x1f0>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d006      	beq.n	8000c3e <main+0x11e>
			  GREEN2_TOGGLE();
 8000c30:	f7ff fb48 	bl	80002c4 <GREEN2_TOGGLE>
			  if (userButton) GREEN3_TOGGLE();
 8000c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <main+0x11e>
 8000c3a:	f7ff fbad 	bl	8000398 <GREEN3_TOGGLE>
		  }


		  // print if change mode (pressed button 1)
		  if (checkprint == 1){
 8000c3e:	4b35      	ldr	r3, [pc, #212]	; (8000d14 <main+0x1f4>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d185      	bne.n	8000b52 <main+0x32>
			  checkprint = 0;
 8000c46:	4b33      	ldr	r3, [pc, #204]	; (8000d14 <main+0x1f4>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
			  if (status_man == MAN_RED){
 8000c4c:	4b32      	ldr	r3, [pc, #200]	; (8000d18 <main+0x1f8>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b66      	cmp	r3, #102	; 0x66
 8000c52:	d10d      	bne.n	8000c70 <main+0x150>
				  char str2[100];
				  HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!RED MODE----#\r\n"), 1000);
 8000c54:	463b      	mov	r3, r7
 8000c56:	4931      	ldr	r1, [pc, #196]	; (8000d1c <main+0x1fc>)
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f002 fc81 	bl	8003560 <siprintf>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	b29a      	uxth	r2, r3
 8000c62:	4639      	mov	r1, r7
 8000c64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c68:	4823      	ldr	r0, [pc, #140]	; (8000cf8 <main+0x1d8>)
 8000c6a:	f001 ffbc 	bl	8002be6 <HAL_UART_Transmit>
 8000c6e:	e770      	b.n	8000b52 <main+0x32>
			  }
			  else if (status_man == MAN_YELLOW){
 8000c70:	4b29      	ldr	r3, [pc, #164]	; (8000d18 <main+0x1f8>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	2b68      	cmp	r3, #104	; 0x68
 8000c76:	d10d      	bne.n	8000c94 <main+0x174>
				  char str2[100];
				  HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!YELLOW MODE----#\r\n"), 1000);
 8000c78:	463b      	mov	r3, r7
 8000c7a:	4929      	ldr	r1, [pc, #164]	; (8000d20 <main+0x200>)
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f002 fc6f 	bl	8003560 <siprintf>
 8000c82:	4603      	mov	r3, r0
 8000c84:	b29a      	uxth	r2, r3
 8000c86:	4639      	mov	r1, r7
 8000c88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c8c:	481a      	ldr	r0, [pc, #104]	; (8000cf8 <main+0x1d8>)
 8000c8e:	f001 ffaa 	bl	8002be6 <HAL_UART_Transmit>
 8000c92:	e75e      	b.n	8000b52 <main+0x32>
			  }
			  else if (status_man == MAN_GREEN){
 8000c94:	4b20      	ldr	r3, [pc, #128]	; (8000d18 <main+0x1f8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b67      	cmp	r3, #103	; 0x67
 8000c9a:	d10d      	bne.n	8000cb8 <main+0x198>
				  char str2[100];
				  HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!GREEN MODE----#\r\n"), 1000);
 8000c9c:	463b      	mov	r3, r7
 8000c9e:	4921      	ldr	r1, [pc, #132]	; (8000d24 <main+0x204>)
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f002 fc5d 	bl	8003560 <siprintf>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	b29a      	uxth	r2, r3
 8000caa:	4639      	mov	r1, r7
 8000cac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cb0:	4811      	ldr	r0, [pc, #68]	; (8000cf8 <main+0x1d8>)
 8000cb2:	f001 ff98 	bl	8002be6 <HAL_UART_Transmit>
 8000cb6:	e74c      	b.n	8000b52 <main+0x32>
			  }
		  	  else if (status_man == INIT){
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <main+0x1f8>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b65      	cmp	r3, #101	; 0x65
 8000cbe:	f47f af48 	bne.w	8000b52 <main+0x32>
		  		  char str2[100];
		  		  HAL_UART_Transmit(&huart2,(uint8_t*) str2, sprintf(str2, "!AUTO MODE----#\r\n"), 1000);
 8000cc2:	463b      	mov	r3, r7
 8000cc4:	4918      	ldr	r1, [pc, #96]	; (8000d28 <main+0x208>)
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	f002 fc4a 	bl	8003560 <siprintf>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	4639      	mov	r1, r7
 8000cd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cd6:	4808      	ldr	r0, [pc, #32]	; (8000cf8 <main+0x1d8>)
 8000cd8:	f001 ff85 	bl	8002be6 <HAL_UART_Transmit>
	  fsm_manual_run();		//manual fsm
 8000cdc:	e739      	b.n	8000b52 <main+0x32>
 8000cde:	bf00      	nop
 8000ce0:	20000180 	.word	0x20000180
 8000ce4:	20000150 	.word	0x20000150
 8000ce8:	20000140 	.word	0x20000140
 8000cec:	2000011c 	.word	0x2000011c
 8000cf0:	51eb851f 	.word	0x51eb851f
 8000cf4:	08003e6c 	.word	0x08003e6c
 8000cf8:	200001c8 	.word	0x200001c8
 8000cfc:	20000210 	.word	0x20000210
 8000d00:	20000218 	.word	0x20000218
 8000d04:	20000220 	.word	0x20000220
 8000d08:	20000214 	.word	0x20000214
 8000d0c:	2000021c 	.word	0x2000021c
 8000d10:	20000224 	.word	0x20000224
 8000d14:	2000017c 	.word	0x2000017c
 8000d18:	20000050 	.word	0x20000050
 8000d1c:	08003e7c 	.word	0x08003e7c
 8000d20:	08003e90 	.word	0x08003e90
 8000d24:	08003ea4 	.word	0x08003ea4
 8000d28:	08003eb8 	.word	0x08003eb8

08000d2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b090      	sub	sp, #64	; 0x40
 8000d30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d32:	f107 0318 	add.w	r3, r7, #24
 8000d36:	2228      	movs	r2, #40	; 0x28
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f002 fc08 	bl	8003550 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d40:	1d3b      	adds	r3, r7, #4
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d52:	2301      	movs	r3, #1
 8000d54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d56:	2310      	movs	r3, #16
 8000d58:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5e:	f107 0318 	add.w	r3, r7, #24
 8000d62:	4618      	mov	r0, r3
 8000d64:	f000 fef4 	bl	8001b50 <HAL_RCC_OscConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000d6e:	f000 f8fb 	bl	8000f68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d72:	230f      	movs	r3, #15
 8000d74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d76:	2300      	movs	r3, #0
 8000d78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d82:	2300      	movs	r3, #0
 8000d84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	2100      	movs	r1, #0
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 f962 	bl	8002054 <HAL_RCC_ClockConfig>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d001      	beq.n	8000d9a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d96:	f000 f8e7 	bl	8000f68 <Error_Handler>
  }
}
 8000d9a:	bf00      	nop
 8000d9c:	3740      	adds	r7, #64	; 0x40
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db8:	463b      	mov	r3, r7
 8000dba:	2200      	movs	r2, #0
 8000dbc:	601a      	str	r2, [r3, #0]
 8000dbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dc6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000dc8:	4b1b      	ldr	r3, [pc, #108]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dca:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000dce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000dd6:	4b18      	ldr	r3, [pc, #96]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dd8:	2209      	movs	r2, #9
 8000dda:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ddc:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de2:	4b15      	ldr	r3, [pc, #84]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000de8:	4813      	ldr	r0, [pc, #76]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000dea:	f001 facb 	bl	8002384 <HAL_TIM_Base_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000df4:	f000 f8b8 	bl	8000f68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dfe:	f107 0308 	add.w	r3, r7, #8
 8000e02:	4619      	mov	r1, r3
 8000e04:	480c      	ldr	r0, [pc, #48]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000e06:	f001 fc61 	bl	80026cc <HAL_TIM_ConfigClockSource>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000e10:	f000 f8aa 	bl	8000f68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e14:	2300      	movs	r3, #0
 8000e16:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	4619      	mov	r1, r3
 8000e20:	4805      	ldr	r0, [pc, #20]	; (8000e38 <MX_TIM2_Init+0x94>)
 8000e22:	f001 fe29 	bl	8002a78 <HAL_TIMEx_MasterConfigSynchronization>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f89c 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	3718      	adds	r7, #24
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	20000180 	.word	0x20000180

08000e3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e40:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <MX_USART2_UART_Init+0x50>)
 8000e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e48:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b09      	ldr	r3, [pc, #36]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e72:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e74:	f001 fe6a 	bl	8002b4c <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e7e:	f000 f873 	bl	8000f68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200001c8 	.word	0x200001c8
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b086      	sub	sp, #24
 8000e94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e96:	f107 0308 	add.w	r3, r7, #8
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <MX_GPIO_Init+0xa8>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a23      	ldr	r2, [pc, #140]	; (8000f38 <MX_GPIO_Init+0xa8>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b21      	ldr	r3, [pc, #132]	; (8000f38 <MX_GPIO_Init+0xa8>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	607b      	str	r3, [r7, #4]
 8000eba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b1e      	ldr	r3, [pc, #120]	; (8000f38 <MX_GPIO_Init+0xa8>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a1d      	ldr	r2, [pc, #116]	; (8000f38 <MX_GPIO_Init+0xa8>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	; (8000f38 <MX_GPIO_Init+0xa8>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	603b      	str	r3, [r7, #0]
 8000ed2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	f64f 7180 	movw	r1, #65408	; 0xff80
 8000eda:	4818      	ldr	r0, [pc, #96]	; (8000f3c <MX_GPIO_Init+0xac>)
 8000edc:	f000 fe1f 	bl	8001b1e <HAL_GPIO_WritePin>
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BUTTONUSER_Pin BUTTON1_Pin BUTTON2_Pin */
  GPIO_InitStruct.Pin = BUTTONUSER_Pin|BUTTON1_Pin|BUTTON2_Pin;
 8000ee0:	2323      	movs	r3, #35	; 0x23
 8000ee2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee8:	2301      	movs	r3, #1
 8000eea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eec:	f107 0308 	add.w	r3, r7, #8
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4813      	ldr	r0, [pc, #76]	; (8000f40 <MX_GPIO_Init+0xb0>)
 8000ef4:	f000 fc80 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON3_Pin */
  GPIO_InitStruct.Pin = BUTTON3_Pin;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f00:	2301      	movs	r3, #1
 8000f02:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON3_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0308 	add.w	r3, r7, #8
 8000f08:	4619      	mov	r1, r3
 8000f0a:	480c      	ldr	r0, [pc, #48]	; (8000f3c <MX_GPIO_Init+0xac>)
 8000f0c:	f000 fc74 	bl	80017f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED1_Pin LED_YELLOW1_Pin LED_GREEN1_Pin LED_RED2_Pin
                           LED_YELLOW2_Pin LED_GREEN2_Pin LED_RED3_Pin LED_YELLOW3_Pin
                           LED_GREEN3_Pin */
  GPIO_InitStruct.Pin = LED_RED1_Pin|LED_YELLOW1_Pin|LED_GREEN1_Pin|LED_RED2_Pin
 8000f10:	f64f 7380 	movw	r3, #65408	; 0xff80
 8000f14:	60bb      	str	r3, [r7, #8]
                          |LED_YELLOW2_Pin|LED_GREEN2_Pin|LED_RED3_Pin|LED_YELLOW3_Pin
                          |LED_GREEN3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f16:	2301      	movs	r3, #1
 8000f18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f22:	f107 0308 	add.w	r3, r7, #8
 8000f26:	4619      	mov	r1, r3
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <MX_GPIO_Init+0xac>)
 8000f2a:	f000 fc65 	bl	80017f8 <HAL_GPIO_Init>

}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40010c00 	.word	0x40010c00
 8000f40:	40010800 	.word	0x40010800

08000f44 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	timerRun();
 8000f4c:	f7ff fab0 	bl	80004b0 <timerRun>
	getKeyInput1();
 8000f50:	f7ff fb70 	bl	8000634 <getKeyInput1>
	getKeyInput2();
 8000f54:	f7ff fbda 	bl	800070c <getKeyInput2>
	getKeyInput3();
 8000f58:	f7ff fc44 	bl	80007e4 <getKeyInput3>
	getKeyInput4();
 8000f5c:	f7ff fcae 	bl	80008bc <getKeyInput4>

}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6c:	b672      	cpsid	i
}
 8000f6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <Error_Handler+0x8>
	...

08000f74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <HAL_MspInit+0x40>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	4a0d      	ldr	r2, [pc, #52]	; (8000fb4 <HAL_MspInit+0x40>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	6193      	str	r3, [r2, #24]
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <HAL_MspInit+0x40>)
 8000f88:	699b      	ldr	r3, [r3, #24]
 8000f8a:	f003 0301 	and.w	r3, r3, #1
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <HAL_MspInit+0x40>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <HAL_MspInit+0x40>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	61d3      	str	r3, [r2, #28]
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <HAL_MspInit+0x40>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000faa:	bf00      	nop
 8000fac:	370c      	adds	r7, #12
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr
 8000fb4:	40021000 	.word	0x40021000

08000fb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fc8:	d113      	bne.n	8000ff2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <HAL_TIM_Base_MspInit+0x44>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a0b      	ldr	r2, [pc, #44]	; (8000ffc <HAL_TIM_Base_MspInit+0x44>)
 8000fd0:	f043 0301 	orr.w	r3, r3, #1
 8000fd4:	61d3      	str	r3, [r2, #28]
 8000fd6:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <HAL_TIM_Base_MspInit+0x44>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	f003 0301 	and.w	r3, r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	201c      	movs	r0, #28
 8000fe8:	f000 fb1f 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fec:	201c      	movs	r0, #28
 8000fee:	f000 fb38 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000ff2:	bf00      	nop
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40021000 	.word	0x40021000

08001000 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b088      	sub	sp, #32
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001008:	f107 0310 	add.w	r3, r7, #16
 800100c:	2200      	movs	r2, #0
 800100e:	601a      	str	r2, [r3, #0]
 8001010:	605a      	str	r2, [r3, #4]
 8001012:	609a      	str	r2, [r3, #8]
 8001014:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a1f      	ldr	r2, [pc, #124]	; (8001098 <HAL_UART_MspInit+0x98>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d137      	bne.n	8001090 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001020:	4b1e      	ldr	r3, [pc, #120]	; (800109c <HAL_UART_MspInit+0x9c>)
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	4a1d      	ldr	r2, [pc, #116]	; (800109c <HAL_UART_MspInit+0x9c>)
 8001026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800102a:	61d3      	str	r3, [r2, #28]
 800102c:	4b1b      	ldr	r3, [pc, #108]	; (800109c <HAL_UART_MspInit+0x9c>)
 800102e:	69db      	ldr	r3, [r3, #28]
 8001030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001038:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_UART_MspInit+0x9c>)
 800103a:	699b      	ldr	r3, [r3, #24]
 800103c:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_UART_MspInit+0x9c>)
 800103e:	f043 0304 	orr.w	r3, r3, #4
 8001042:	6193      	str	r3, [r2, #24]
 8001044:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_UART_MspInit+0x9c>)
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f003 0304 	and.w	r3, r3, #4
 800104c:	60bb      	str	r3, [r7, #8]
 800104e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001050:	2304      	movs	r3, #4
 8001052:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001058:	2303      	movs	r3, #3
 800105a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	4619      	mov	r1, r3
 8001062:	480f      	ldr	r0, [pc, #60]	; (80010a0 <HAL_UART_MspInit+0xa0>)
 8001064:	f000 fbc8 	bl	80017f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001068:	2308      	movs	r3, #8
 800106a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001070:	2300      	movs	r3, #0
 8001072:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	f107 0310 	add.w	r3, r7, #16
 8001078:	4619      	mov	r1, r3
 800107a:	4809      	ldr	r0, [pc, #36]	; (80010a0 <HAL_UART_MspInit+0xa0>)
 800107c:	f000 fbbc 	bl	80017f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2100      	movs	r1, #0
 8001084:	2026      	movs	r0, #38	; 0x26
 8001086:	f000 fad0 	bl	800162a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800108a:	2026      	movs	r0, #38	; 0x26
 800108c:	f000 fae9 	bl	8001662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001090:	bf00      	nop
 8001092:	3720      	adds	r7, #32
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40004400 	.word	0x40004400
 800109c:	40021000 	.word	0x40021000
 80010a0:	40010800 	.word	0x40010800

080010a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010a8:	e7fe      	b.n	80010a8 <NMI_Handler+0x4>

080010aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ae:	e7fe      	b.n	80010ae <HardFault_Handler+0x4>

080010b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010b4:	e7fe      	b.n	80010b4 <MemManage_Handler+0x4>

080010b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010b6:	b480      	push	{r7}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ba:	e7fe      	b.n	80010ba <BusFault_Handler+0x4>

080010bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010c0:	e7fe      	b.n	80010c0 <UsageFault_Handler+0x4>

080010c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010c2:	b480      	push	{r7}
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bc80      	pop	{r7}
 80010cc:	4770      	bx	lr

080010ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010ce:	b480      	push	{r7}
 80010d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr

080010da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010da:	b480      	push	{r7}
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010de:	bf00      	nop
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bc80      	pop	{r7}
 80010e4:	4770      	bx	lr

080010e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010e6:	b580      	push	{r7, lr}
 80010e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ea:	f000 f9ab 	bl	8001444 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
	...

080010f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010f8:	4802      	ldr	r0, [pc, #8]	; (8001104 <TIM2_IRQHandler+0x10>)
 80010fa:	f001 f9df 	bl	80024bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20000180 	.word	0x20000180

08001108 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800110c:	4802      	ldr	r0, [pc, #8]	; (8001118 <USART2_IRQHandler+0x10>)
 800110e:	f001 fdfd 	bl	8002d0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001112:	bf00      	nop
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200001c8 	.word	0x200001c8

0800111c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b086      	sub	sp, #24
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001124:	4a14      	ldr	r2, [pc, #80]	; (8001178 <_sbrk+0x5c>)
 8001126:	4b15      	ldr	r3, [pc, #84]	; (800117c <_sbrk+0x60>)
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001130:	4b13      	ldr	r3, [pc, #76]	; (8001180 <_sbrk+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d102      	bne.n	800113e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001138:	4b11      	ldr	r3, [pc, #68]	; (8001180 <_sbrk+0x64>)
 800113a:	4a12      	ldr	r2, [pc, #72]	; (8001184 <_sbrk+0x68>)
 800113c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <_sbrk+0x64>)
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4413      	add	r3, r2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	429a      	cmp	r2, r3
 800114a:	d207      	bcs.n	800115c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800114c:	f002 f9d6 	bl	80034fc <__errno>
 8001150:	4603      	mov	r3, r0
 8001152:	220c      	movs	r2, #12
 8001154:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001156:	f04f 33ff 	mov.w	r3, #4294967295
 800115a:	e009      	b.n	8001170 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800115c:	4b08      	ldr	r3, [pc, #32]	; (8001180 <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001162:	4b07      	ldr	r3, [pc, #28]	; (8001180 <_sbrk+0x64>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4413      	add	r3, r2
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <_sbrk+0x64>)
 800116c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	4618      	mov	r0, r3
 8001172:	3718      	adds	r7, #24
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	20002800 	.word	0x20002800
 800117c:	00000400 	.word	0x00000400
 8001180:	2000020c 	.word	0x2000020c
 8001184:	20000240 	.word	0x20000240

08001188 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800118c:	bf00      	nop
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <light_control_1>:

int status_light1 = INIT1;
int status_light2 = INIT2;


void light_control_1(){
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

	switch(status_light1){
 8001198:	4b31      	ldr	r3, [pc, #196]	; (8001260 <light_control_1+0xcc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	3b13      	subs	r3, #19
 800119e:	2b03      	cmp	r3, #3
 80011a0:	d854      	bhi.n	800124c <light_control_1+0xb8>
 80011a2:	a201      	add	r2, pc, #4	; (adr r2, 80011a8 <light_control_1+0x14>)
 80011a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011a8:	080011b9 	.word	0x080011b9
 80011ac:	080011cf 	.word	0x080011cf
 80011b0:	08001223 	.word	0x08001223
 80011b4:	080011f9 	.word	0x080011f9

		case INIT1:
			setTimer2(timer_red);
 80011b8:	4b2a      	ldr	r3, [pc, #168]	; (8001264 <light_control_1+0xd0>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f923 	bl	8000408 <setTimer2>
			LED1_OFF();
 80011c2:	f7fe ffc3 	bl	800014c <LED1_OFF>
			status_light1 = AUTO_RED1;
 80011c6:	4b26      	ldr	r3, [pc, #152]	; (8001260 <light_control_1+0xcc>)
 80011c8:	2214      	movs	r2, #20
 80011ca:	601a      	str	r2, [r3, #0]
			break;
 80011cc:	e045      	b.n	800125a <light_control_1+0xc6>

		case AUTO_RED1:
			RED1_flag = 1;
 80011ce:	4b26      	ldr	r3, [pc, #152]	; (8001268 <light_control_1+0xd4>)
 80011d0:	2201      	movs	r2, #1
 80011d2:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 80011d4:	4b25      	ldr	r3, [pc, #148]	; (800126c <light_control_1+0xd8>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b01      	cmp	r3, #1
 80011da:	d139      	bne.n	8001250 <light_control_1+0xbc>
				setTimer2(timer_green);
 80011dc:	4b24      	ldr	r3, [pc, #144]	; (8001270 <light_control_1+0xdc>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff f911 	bl	8000408 <setTimer2>
				LED1_OFF();
 80011e6:	f7fe ffb1 	bl	800014c <LED1_OFF>
				RED1_flag = 0;
 80011ea:	4b1f      	ldr	r3, [pc, #124]	; (8001268 <light_control_1+0xd4>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_GREEN1;
 80011f0:	4b1b      	ldr	r3, [pc, #108]	; (8001260 <light_control_1+0xcc>)
 80011f2:	2216      	movs	r2, #22
 80011f4:	601a      	str	r2, [r3, #0]
			}
			break;
 80011f6:	e02b      	b.n	8001250 <light_control_1+0xbc>

		case AUTO_GREEN1:
			GREEN1_flag = 1;
 80011f8:	4b1e      	ldr	r3, [pc, #120]	; (8001274 <light_control_1+0xe0>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 80011fe:	4b1b      	ldr	r3, [pc, #108]	; (800126c <light_control_1+0xd8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d126      	bne.n	8001254 <light_control_1+0xc0>
				setTimer2(timer_yellow);
 8001206:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <light_control_1+0xe4>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff f8fc 	bl	8000408 <setTimer2>
				LED1_OFF();
 8001210:	f7fe ff9c 	bl	800014c <LED1_OFF>
				GREEN1_flag = 0;
 8001214:	4b17      	ldr	r3, [pc, #92]	; (8001274 <light_control_1+0xe0>)
 8001216:	2200      	movs	r2, #0
 8001218:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_YELLOW1;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <light_control_1+0xcc>)
 800121c:	2215      	movs	r2, #21
 800121e:	601a      	str	r2, [r3, #0]
			}
			break;
 8001220:	e018      	b.n	8001254 <light_control_1+0xc0>

		case AUTO_YELLOW1:
			YELLOW1_flag = 1;
 8001222:	4b16      	ldr	r3, [pc, #88]	; (800127c <light_control_1+0xe8>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]

			if(timer2_flag == 1){
 8001228:	4b10      	ldr	r3, [pc, #64]	; (800126c <light_control_1+0xd8>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d113      	bne.n	8001258 <light_control_1+0xc4>
				setTimer2(timer_red);
 8001230:	4b0c      	ldr	r3, [pc, #48]	; (8001264 <light_control_1+0xd0>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff f8e7 	bl	8000408 <setTimer2>
				LED1_OFF();
 800123a:	f7fe ff87 	bl	800014c <LED1_OFF>
				YELLOW1_flag = 0;
 800123e:	4b0f      	ldr	r3, [pc, #60]	; (800127c <light_control_1+0xe8>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
				status_light1 = AUTO_RED1;
 8001244:	4b06      	ldr	r3, [pc, #24]	; (8001260 <light_control_1+0xcc>)
 8001246:	2214      	movs	r2, #20
 8001248:	601a      	str	r2, [r3, #0]
			}
			break;
 800124a:	e005      	b.n	8001258 <light_control_1+0xc4>
		default:
			break;
 800124c:	bf00      	nop
 800124e:	e004      	b.n	800125a <light_control_1+0xc6>
			break;
 8001250:	bf00      	nop
 8001252:	e002      	b.n	800125a <light_control_1+0xc6>
			break;
 8001254:	bf00      	nop
 8001256:	e000      	b.n	800125a <light_control_1+0xc6>
			break;
 8001258:	bf00      	nop
		}

}
 800125a:	bf00      	nop
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	20000064 	.word	0x20000064
 8001264:	20000054 	.word	0x20000054
 8001268:	20000210 	.word	0x20000210
 800126c:	20000144 	.word	0x20000144
 8001270:	20000058 	.word	0x20000058
 8001274:	20000220 	.word	0x20000220
 8001278:	2000005c 	.word	0x2000005c
 800127c:	20000218 	.word	0x20000218

08001280 <light_control_2>:




void light_control_2(){
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0

	switch(status_light2){
 8001284:	4b31      	ldr	r3, [pc, #196]	; (800134c <light_control_2+0xcc>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3b17      	subs	r3, #23
 800128a:	2b03      	cmp	r3, #3
 800128c:	d854      	bhi.n	8001338 <light_control_2+0xb8>
 800128e:	a201      	add	r2, pc, #4	; (adr r2, 8001294 <light_control_2+0x14>)
 8001290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001294:	080012a5 	.word	0x080012a5
 8001298:	080012bb 	.word	0x080012bb
 800129c:	080012e5 	.word	0x080012e5
 80012a0:	0800130f 	.word	0x0800130f

		case INIT2:
			setTimer3(timer_green);
 80012a4:	4b2a      	ldr	r3, [pc, #168]	; (8001350 <light_control_2+0xd0>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff f8c9 	bl	8000440 <setTimer3>
			LED2_OFF();
 80012ae:	f7fe ffb9 	bl	8000224 <LED2_OFF>
			status_light2 = AUTO_GREEN2;
 80012b2:	4b26      	ldr	r3, [pc, #152]	; (800134c <light_control_2+0xcc>)
 80012b4:	221a      	movs	r2, #26
 80012b6:	601a      	str	r2, [r3, #0]
			break;
 80012b8:	e045      	b.n	8001346 <light_control_2+0xc6>

		case AUTO_RED2:
			RED2_flag = 1;
 80012ba:	4b26      	ldr	r3, [pc, #152]	; (8001354 <light_control_2+0xd4>)
 80012bc:	2201      	movs	r2, #1
 80012be:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <light_control_2+0xd8>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d139      	bne.n	800133c <light_control_2+0xbc>
				setTimer3(timer_green);
 80012c8:	4b21      	ldr	r3, [pc, #132]	; (8001350 <light_control_2+0xd0>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff f8b7 	bl	8000440 <setTimer3>
				LED2_OFF();
 80012d2:	f7fe ffa7 	bl	8000224 <LED2_OFF>
				RED2_flag = 0;
 80012d6:	4b1f      	ldr	r3, [pc, #124]	; (8001354 <light_control_2+0xd4>)
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_GREEN2;
 80012dc:	4b1b      	ldr	r3, [pc, #108]	; (800134c <light_control_2+0xcc>)
 80012de:	221a      	movs	r2, #26
 80012e0:	601a      	str	r2, [r3, #0]
			}
			break;
 80012e2:	e02b      	b.n	800133c <light_control_2+0xbc>

		case AUTO_YELLOW2:
			YELLOW2_flag = 1;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <light_control_2+0xdc>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 80012ea:	4b1b      	ldr	r3, [pc, #108]	; (8001358 <light_control_2+0xd8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2b01      	cmp	r3, #1
 80012f0:	d126      	bne.n	8001340 <light_control_2+0xc0>
				setTimer3(timer_red);
 80012f2:	4b1b      	ldr	r3, [pc, #108]	; (8001360 <light_control_2+0xe0>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff f8a2 	bl	8000440 <setTimer3>
				YELLOW2_flag = 0;
 80012fc:	4b17      	ldr	r3, [pc, #92]	; (800135c <light_control_2+0xdc>)
 80012fe:	2200      	movs	r2, #0
 8001300:	601a      	str	r2, [r3, #0]
				LED2_OFF();
 8001302:	f7fe ff8f 	bl	8000224 <LED2_OFF>
				status_light2 = AUTO_RED2;
 8001306:	4b11      	ldr	r3, [pc, #68]	; (800134c <light_control_2+0xcc>)
 8001308:	2218      	movs	r2, #24
 800130a:	601a      	str	r2, [r3, #0]
			}
			break;
 800130c:	e018      	b.n	8001340 <light_control_2+0xc0>

		case AUTO_GREEN2:
			GREEN2_flag = 1;
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <light_control_2+0xe4>)
 8001310:	2201      	movs	r2, #1
 8001312:	601a      	str	r2, [r3, #0]
			if(timer3_flag == 1){
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <light_control_2+0xd8>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d113      	bne.n	8001344 <light_control_2+0xc4>
				setTimer3(timer_yellow);
 800131c:	4b12      	ldr	r3, [pc, #72]	; (8001368 <light_control_2+0xe8>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff f88d 	bl	8000440 <setTimer3>
				LED2_OFF();
 8001326:	f7fe ff7d 	bl	8000224 <LED2_OFF>
				GREEN2_flag = 0;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <light_control_2+0xe4>)
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
				status_light2 = AUTO_YELLOW2;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <light_control_2+0xcc>)
 8001332:	2219      	movs	r2, #25
 8001334:	601a      	str	r2, [r3, #0]
			}
			break;
 8001336:	e005      	b.n	8001344 <light_control_2+0xc4>
		default:
			break;
 8001338:	bf00      	nop
 800133a:	e004      	b.n	8001346 <light_control_2+0xc6>
			break;
 800133c:	bf00      	nop
 800133e:	e002      	b.n	8001346 <light_control_2+0xc6>
			break;
 8001340:	bf00      	nop
 8001342:	e000      	b.n	8001346 <light_control_2+0xc6>
			break;
 8001344:	bf00      	nop
		}

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000068 	.word	0x20000068
 8001350:	20000058 	.word	0x20000058
 8001354:	20000214 	.word	0x20000214
 8001358:	20000148 	.word	0x20000148
 800135c:	2000021c 	.word	0x2000021c
 8001360:	20000054 	.word	0x20000054
 8001364:	20000224 	.word	0x20000224
 8001368:	2000005c 	.word	0x2000005c

0800136c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	; (80013a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	; (80013b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001392:	f7ff fef9 	bl	8001188 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001396:	f002 f8b7 	bl	8003508 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800139a:	f7ff fbc1 	bl	8000b20 <main>
  bx lr
 800139e:	4770      	bx	lr
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80013a8:	08003f30 	.word	0x08003f30
  ldr r2, =_sbss
 80013ac:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80013b0:	2000023c 	.word	0x2000023c

080013b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC1_2_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013bc:	4b08      	ldr	r3, [pc, #32]	; (80013e0 <HAL_Init+0x28>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a07      	ldr	r2, [pc, #28]	; (80013e0 <HAL_Init+0x28>)
 80013c2:	f043 0310 	orr.w	r3, r3, #16
 80013c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c8:	2003      	movs	r0, #3
 80013ca:	f000 f923 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ce:	200f      	movs	r0, #15
 80013d0:	f000 f808 	bl	80013e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d4:	f7ff fdce 	bl	8000f74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013ec:	4b12      	ldr	r3, [pc, #72]	; (8001438 <HAL_InitTick+0x54>)
 80013ee:	681a      	ldr	r2, [r3, #0]
 80013f0:	4b12      	ldr	r3, [pc, #72]	; (800143c <HAL_InitTick+0x58>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	4619      	mov	r1, r3
 80013f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80013fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001402:	4618      	mov	r0, r3
 8001404:	f000 f93b 	bl	800167e <HAL_SYSTICK_Config>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e00e      	b.n	8001430 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2b0f      	cmp	r3, #15
 8001416:	d80a      	bhi.n	800142e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001418:	2200      	movs	r2, #0
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	f04f 30ff 	mov.w	r0, #4294967295
 8001420:	f000 f903 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001424:	4a06      	ldr	r2, [pc, #24]	; (8001440 <HAL_InitTick+0x5c>)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	3708      	adds	r7, #8
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000060 	.word	0x20000060
 800143c:	20000070 	.word	0x20000070
 8001440:	2000006c 	.word	0x2000006c

08001444 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_IncTick+0x1c>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	461a      	mov	r2, r3
 800144e:	4b05      	ldr	r3, [pc, #20]	; (8001464 <HAL_IncTick+0x20>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4413      	add	r3, r2
 8001454:	4a03      	ldr	r2, [pc, #12]	; (8001464 <HAL_IncTick+0x20>)
 8001456:	6013      	str	r3, [r2, #0]
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000070 	.word	0x20000070
 8001464:	20000228 	.word	0x20000228

08001468 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return uwTick;
 800146c:	4b02      	ldr	r3, [pc, #8]	; (8001478 <HAL_GetTick+0x10>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	bc80      	pop	{r7}
 8001476:	4770      	bx	lr
 8001478:	20000228 	.word	0x20000228

0800147c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800147c:	b480      	push	{r7}
 800147e:	b085      	sub	sp, #20
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001492:	68ba      	ldr	r2, [r7, #8]
 8001494:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001498:	4013      	ands	r3, r2
 800149a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014ae:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <__NVIC_SetPriorityGrouping+0x44>)
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	60d3      	str	r3, [r2, #12]
}
 80014b4:	bf00      	nop
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bc80      	pop	{r7}
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014c8:	4b04      	ldr	r3, [pc, #16]	; (80014dc <__NVIC_GetPriorityGrouping+0x18>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	f003 0307 	and.w	r3, r3, #7
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr
 80014da:	bf00      	nop
 80014dc:	e000ed00 	.word	0xe000ed00

080014e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	db0b      	blt.n	800150a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	f003 021f 	and.w	r2, r3, #31
 80014f8:	4906      	ldr	r1, [pc, #24]	; (8001514 <__NVIC_EnableIRQ+0x34>)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	095b      	lsrs	r3, r3, #5
 8001500:	2001      	movs	r0, #1
 8001502:	fa00 f202 	lsl.w	r2, r0, r2
 8001506:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800150a:	bf00      	nop
 800150c:	370c      	adds	r7, #12
 800150e:	46bd      	mov	sp, r7
 8001510:	bc80      	pop	{r7}
 8001512:	4770      	bx	lr
 8001514:	e000e100 	.word	0xe000e100

08001518 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001528:	2b00      	cmp	r3, #0
 800152a:	db0a      	blt.n	8001542 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	b2da      	uxtb	r2, r3
 8001530:	490c      	ldr	r1, [pc, #48]	; (8001564 <__NVIC_SetPriority+0x4c>)
 8001532:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001536:	0112      	lsls	r2, r2, #4
 8001538:	b2d2      	uxtb	r2, r2
 800153a:	440b      	add	r3, r1
 800153c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001540:	e00a      	b.n	8001558 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	b2da      	uxtb	r2, r3
 8001546:	4908      	ldr	r1, [pc, #32]	; (8001568 <__NVIC_SetPriority+0x50>)
 8001548:	79fb      	ldrb	r3, [r7, #7]
 800154a:	f003 030f 	and.w	r3, r3, #15
 800154e:	3b04      	subs	r3, #4
 8001550:	0112      	lsls	r2, r2, #4
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	440b      	add	r3, r1
 8001556:	761a      	strb	r2, [r3, #24]
}
 8001558:	bf00      	nop
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	bc80      	pop	{r7}
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	e000e100 	.word	0xe000e100
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156c:	b480      	push	{r7}
 800156e:	b089      	sub	sp, #36	; 0x24
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	f1c3 0307 	rsb	r3, r3, #7
 8001586:	2b04      	cmp	r3, #4
 8001588:	bf28      	it	cs
 800158a:	2304      	movcs	r3, #4
 800158c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	3304      	adds	r3, #4
 8001592:	2b06      	cmp	r3, #6
 8001594:	d902      	bls.n	800159c <NVIC_EncodePriority+0x30>
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	3b03      	subs	r3, #3
 800159a:	e000      	b.n	800159e <NVIC_EncodePriority+0x32>
 800159c:	2300      	movs	r3, #0
 800159e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a0:	f04f 32ff 	mov.w	r2, #4294967295
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	fa02 f303 	lsl.w	r3, r2, r3
 80015aa:	43da      	mvns	r2, r3
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	401a      	ands	r2, r3
 80015b0:	697b      	ldr	r3, [r7, #20]
 80015b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b4:	f04f 31ff 	mov.w	r1, #4294967295
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fa01 f303 	lsl.w	r3, r1, r3
 80015be:	43d9      	mvns	r1, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	4313      	orrs	r3, r2
         );
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3724      	adds	r7, #36	; 0x24
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295
 80015f4:	f7ff ff90 	bl	8001518 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff2d 	bl	800147c <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff42 	bl	80014c4 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff90 	bl	800156c <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5f 	bl	8001518 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800166c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff ff35 	bl	80014e0 <__NVIC_EnableIRQ>
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}

0800167e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800167e:	b580      	push	{r7, lr}
 8001680:	b082      	sub	sp, #8
 8001682:	af00      	add	r7, sp, #0
 8001684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f7ff ffa2 	bl	80015d0 <SysTick_Config>
 800168c:	4603      	mov	r3, r0
}
 800168e:	4618      	mov	r0, r3
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001696:	b480      	push	{r7}
 8001698:	b085      	sub	sp, #20
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800169e:	2300      	movs	r3, #0
 80016a0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80016a8:	2b02      	cmp	r3, #2
 80016aa:	d008      	beq.n	80016be <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2204      	movs	r2, #4
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2200      	movs	r2, #0
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e020      	b.n	8001700 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 020e 	bic.w	r2, r2, #14
 80016cc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0201 	bic.w	r2, r2, #1
 80016dc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e6:	2101      	movs	r1, #1
 80016e8:	fa01 f202 	lsl.w	r2, r1, r2
 80016ec:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2201      	movs	r2, #1
 80016f2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80016fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001700:	4618      	mov	r0, r3
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr
	...

0800170c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001714:	2300      	movs	r3, #0
 8001716:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800171e:	2b02      	cmp	r3, #2
 8001720:	d005      	beq.n	800172e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2204      	movs	r2, #4
 8001726:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	73fb      	strb	r3, [r7, #15]
 800172c:	e051      	b.n	80017d2 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f022 020e 	bic.w	r2, r2, #14
 800173c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0201 	bic.w	r2, r2, #1
 800174c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_DMA_Abort_IT+0xd0>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d029      	beq.n	80017ac <HAL_DMA_Abort_IT+0xa0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a20      	ldr	r2, [pc, #128]	; (80017e0 <HAL_DMA_Abort_IT+0xd4>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d022      	beq.n	80017a8 <HAL_DMA_Abort_IT+0x9c>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_DMA_Abort_IT+0xd8>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d01a      	beq.n	80017a2 <HAL_DMA_Abort_IT+0x96>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a1d      	ldr	r2, [pc, #116]	; (80017e8 <HAL_DMA_Abort_IT+0xdc>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d012      	beq.n	800179c <HAL_DMA_Abort_IT+0x90>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_DMA_Abort_IT+0xe0>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d00a      	beq.n	8001796 <HAL_DMA_Abort_IT+0x8a>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1a      	ldr	r2, [pc, #104]	; (80017f0 <HAL_DMA_Abort_IT+0xe4>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d102      	bne.n	8001790 <HAL_DMA_Abort_IT+0x84>
 800178a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800178e:	e00e      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 8001790:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001794:	e00b      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 8001796:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800179a:	e008      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 800179c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017a0:	e005      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 80017a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017a6:	e002      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 80017a8:	2310      	movs	r3, #16
 80017aa:	e000      	b.n	80017ae <HAL_DMA_Abort_IT+0xa2>
 80017ac:	2301      	movs	r3, #1
 80017ae:	4a11      	ldr	r2, [pc, #68]	; (80017f4 <HAL_DMA_Abort_IT+0xe8>)
 80017b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d003      	beq.n	80017d2 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017ce:	6878      	ldr	r0, [r7, #4]
 80017d0:	4798      	blx	r3
    } 
  }
  return status;
 80017d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3710      	adds	r7, #16
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40020008 	.word	0x40020008
 80017e0:	4002001c 	.word	0x4002001c
 80017e4:	40020030 	.word	0x40020030
 80017e8:	40020044 	.word	0x40020044
 80017ec:	40020058 	.word	0x40020058
 80017f0:	4002006c 	.word	0x4002006c
 80017f4:	40020000 	.word	0x40020000

080017f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b08b      	sub	sp, #44	; 0x2c
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180a:	e161      	b.n	8001ad0 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800180c:	2201      	movs	r2, #1
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	69fa      	ldr	r2, [r7, #28]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001820:	69ba      	ldr	r2, [r7, #24]
 8001822:	69fb      	ldr	r3, [r7, #28]
 8001824:	429a      	cmp	r2, r3
 8001826:	f040 8150 	bne.w	8001aca <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	4a97      	ldr	r2, [pc, #604]	; (8001a8c <HAL_GPIO_Init+0x294>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d05e      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001834:	4a95      	ldr	r2, [pc, #596]	; (8001a8c <HAL_GPIO_Init+0x294>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d875      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 800183a:	4a95      	ldr	r2, [pc, #596]	; (8001a90 <HAL_GPIO_Init+0x298>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d058      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001840:	4a93      	ldr	r2, [pc, #588]	; (8001a90 <HAL_GPIO_Init+0x298>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d86f      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 8001846:	4a93      	ldr	r2, [pc, #588]	; (8001a94 <HAL_GPIO_Init+0x29c>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d052      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 800184c:	4a91      	ldr	r2, [pc, #580]	; (8001a94 <HAL_GPIO_Init+0x29c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d869      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 8001852:	4a91      	ldr	r2, [pc, #580]	; (8001a98 <HAL_GPIO_Init+0x2a0>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d04c      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001858:	4a8f      	ldr	r2, [pc, #572]	; (8001a98 <HAL_GPIO_Init+0x2a0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d863      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 800185e:	4a8f      	ldr	r2, [pc, #572]	; (8001a9c <HAL_GPIO_Init+0x2a4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d046      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
 8001864:	4a8d      	ldr	r2, [pc, #564]	; (8001a9c <HAL_GPIO_Init+0x2a4>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d85d      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 800186a:	2b12      	cmp	r3, #18
 800186c:	d82a      	bhi.n	80018c4 <HAL_GPIO_Init+0xcc>
 800186e:	2b12      	cmp	r3, #18
 8001870:	d859      	bhi.n	8001926 <HAL_GPIO_Init+0x12e>
 8001872:	a201      	add	r2, pc, #4	; (adr r2, 8001878 <HAL_GPIO_Init+0x80>)
 8001874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001878:	080018f3 	.word	0x080018f3
 800187c:	080018cd 	.word	0x080018cd
 8001880:	080018df 	.word	0x080018df
 8001884:	08001921 	.word	0x08001921
 8001888:	08001927 	.word	0x08001927
 800188c:	08001927 	.word	0x08001927
 8001890:	08001927 	.word	0x08001927
 8001894:	08001927 	.word	0x08001927
 8001898:	08001927 	.word	0x08001927
 800189c:	08001927 	.word	0x08001927
 80018a0:	08001927 	.word	0x08001927
 80018a4:	08001927 	.word	0x08001927
 80018a8:	08001927 	.word	0x08001927
 80018ac:	08001927 	.word	0x08001927
 80018b0:	08001927 	.word	0x08001927
 80018b4:	08001927 	.word	0x08001927
 80018b8:	08001927 	.word	0x08001927
 80018bc:	080018d5 	.word	0x080018d5
 80018c0:	080018e9 	.word	0x080018e9
 80018c4:	4a76      	ldr	r2, [pc, #472]	; (8001aa0 <HAL_GPIO_Init+0x2a8>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d013      	beq.n	80018f2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80018ca:	e02c      	b.n	8001926 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	623b      	str	r3, [r7, #32]
          break;
 80018d2:	e029      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	3304      	adds	r3, #4
 80018da:	623b      	str	r3, [r7, #32]
          break;
 80018dc:	e024      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	3308      	adds	r3, #8
 80018e4:	623b      	str	r3, [r7, #32]
          break;
 80018e6:	e01f      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	330c      	adds	r3, #12
 80018ee:	623b      	str	r3, [r7, #32]
          break;
 80018f0:	e01a      	b.n	8001928 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689b      	ldr	r3, [r3, #8]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d102      	bne.n	8001900 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80018fa:	2304      	movs	r3, #4
 80018fc:	623b      	str	r3, [r7, #32]
          break;
 80018fe:	e013      	b.n	8001928 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d105      	bne.n	8001914 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001908:	2308      	movs	r3, #8
 800190a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	69fa      	ldr	r2, [r7, #28]
 8001910:	611a      	str	r2, [r3, #16]
          break;
 8001912:	e009      	b.n	8001928 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001914:	2308      	movs	r3, #8
 8001916:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	615a      	str	r2, [r3, #20]
          break;
 800191e:	e003      	b.n	8001928 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001920:	2300      	movs	r3, #0
 8001922:	623b      	str	r3, [r7, #32]
          break;
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x130>
          break;
 8001926:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	2bff      	cmp	r3, #255	; 0xff
 800192c:	d801      	bhi.n	8001932 <HAL_GPIO_Init+0x13a>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	e001      	b.n	8001936 <HAL_GPIO_Init+0x13e>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	3304      	adds	r3, #4
 8001936:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	2bff      	cmp	r3, #255	; 0xff
 800193c:	d802      	bhi.n	8001944 <HAL_GPIO_Init+0x14c>
 800193e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	e002      	b.n	800194a <HAL_GPIO_Init+0x152>
 8001944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001946:	3b08      	subs	r3, #8
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	210f      	movs	r1, #15
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	fa01 f303 	lsl.w	r3, r1, r3
 8001958:	43db      	mvns	r3, r3
 800195a:	401a      	ands	r2, r3
 800195c:	6a39      	ldr	r1, [r7, #32]
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	fa01 f303 	lsl.w	r3, r1, r3
 8001964:	431a      	orrs	r2, r3
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80a9 	beq.w	8001aca <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001978:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <HAL_GPIO_Init+0x2ac>)
 800197a:	699b      	ldr	r3, [r3, #24]
 800197c:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_GPIO_Init+0x2ac>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6193      	str	r3, [r2, #24]
 8001984:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_GPIO_Init+0x2ac>)
 8001986:	699b      	ldr	r3, [r3, #24]
 8001988:	f003 0301 	and.w	r3, r3, #1
 800198c:	60bb      	str	r3, [r7, #8]
 800198e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001990:	4a45      	ldr	r2, [pc, #276]	; (8001aa8 <HAL_GPIO_Init+0x2b0>)
 8001992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001994:	089b      	lsrs	r3, r3, #2
 8001996:	3302      	adds	r3, #2
 8001998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800199c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	f003 0303 	and.w	r3, r3, #3
 80019a4:	009b      	lsls	r3, r3, #2
 80019a6:	220f      	movs	r2, #15
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	68fa      	ldr	r2, [r7, #12]
 80019b0:	4013      	ands	r3, r2
 80019b2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	4a3d      	ldr	r2, [pc, #244]	; (8001aac <HAL_GPIO_Init+0x2b4>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d00d      	beq.n	80019d8 <HAL_GPIO_Init+0x1e0>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a3c      	ldr	r2, [pc, #240]	; (8001ab0 <HAL_GPIO_Init+0x2b8>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d007      	beq.n	80019d4 <HAL_GPIO_Init+0x1dc>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a3b      	ldr	r2, [pc, #236]	; (8001ab4 <HAL_GPIO_Init+0x2bc>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d101      	bne.n	80019d0 <HAL_GPIO_Init+0x1d8>
 80019cc:	2302      	movs	r3, #2
 80019ce:	e004      	b.n	80019da <HAL_GPIO_Init+0x1e2>
 80019d0:	2303      	movs	r3, #3
 80019d2:	e002      	b.n	80019da <HAL_GPIO_Init+0x1e2>
 80019d4:	2301      	movs	r3, #1
 80019d6:	e000      	b.n	80019da <HAL_GPIO_Init+0x1e2>
 80019d8:	2300      	movs	r3, #0
 80019da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019dc:	f002 0203 	and.w	r2, r2, #3
 80019e0:	0092      	lsls	r2, r2, #2
 80019e2:	4093      	lsls	r3, r2
 80019e4:	68fa      	ldr	r2, [r7, #12]
 80019e6:	4313      	orrs	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80019ea:	492f      	ldr	r1, [pc, #188]	; (8001aa8 <HAL_GPIO_Init+0x2b0>)
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	089b      	lsrs	r3, r3, #2
 80019f0:	3302      	adds	r3, #2
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d006      	beq.n	8001a12 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001a04:	4b2c      	ldr	r3, [pc, #176]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	492b      	ldr	r1, [pc, #172]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	600b      	str	r3, [r1, #0]
 8001a10:	e006      	b.n	8001a20 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a12:	4b29      	ldr	r3, [pc, #164]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	4927      	ldr	r1, [pc, #156]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d006      	beq.n	8001a3a <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001a2c:	4b22      	ldr	r3, [pc, #136]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a2e:	685a      	ldr	r2, [r3, #4]
 8001a30:	4921      	ldr	r1, [pc, #132]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
 8001a38:	e006      	b.n	8001a48 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001a3a:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	43db      	mvns	r3, r3
 8001a42:	491d      	ldr	r1, [pc, #116]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a44:	4013      	ands	r3, r2
 8001a46:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d006      	beq.n	8001a62 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001a54:	4b18      	ldr	r3, [pc, #96]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a56:	689a      	ldr	r2, [r3, #8]
 8001a58:	4917      	ldr	r1, [pc, #92]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	608b      	str	r3, [r1, #8]
 8001a60:	e006      	b.n	8001a70 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a62:	4b15      	ldr	r3, [pc, #84]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a64:	689a      	ldr	r2, [r3, #8]
 8001a66:	69bb      	ldr	r3, [r7, #24]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	4913      	ldr	r1, [pc, #76]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d01f      	beq.n	8001abc <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a7c:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a7e:	68da      	ldr	r2, [r3, #12]
 8001a80:	490d      	ldr	r1, [pc, #52]	; (8001ab8 <HAL_GPIO_Init+0x2c0>)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	60cb      	str	r3, [r1, #12]
 8001a88:	e01f      	b.n	8001aca <HAL_GPIO_Init+0x2d2>
 8001a8a:	bf00      	nop
 8001a8c:	10320000 	.word	0x10320000
 8001a90:	10310000 	.word	0x10310000
 8001a94:	10220000 	.word	0x10220000
 8001a98:	10210000 	.word	0x10210000
 8001a9c:	10120000 	.word	0x10120000
 8001aa0:	10110000 	.word	0x10110000
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	40010000 	.word	0x40010000
 8001aac:	40010800 	.word	0x40010800
 8001ab0:	40010c00 	.word	0x40010c00
 8001ab4:	40011000 	.word	0x40011000
 8001ab8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001abc:	4b0b      	ldr	r3, [pc, #44]	; (8001aec <HAL_GPIO_Init+0x2f4>)
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	4909      	ldr	r1, [pc, #36]	; (8001aec <HAL_GPIO_Init+0x2f4>)
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	3301      	adds	r3, #1
 8001ace:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f47f ae96 	bne.w	800180c <HAL_GPIO_Init+0x14>
  }
}
 8001ae0:	bf00      	nop
 8001ae2:	bf00      	nop
 8001ae4:	372c      	adds	r7, #44	; 0x2c
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bc80      	pop	{r7}
 8001aea:	4770      	bx	lr
 8001aec:	40010400 	.word	0x40010400

08001af0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b085      	sub	sp, #20
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	460b      	mov	r3, r1
 8001afa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689a      	ldr	r2, [r3, #8]
 8001b00:	887b      	ldrh	r3, [r7, #2]
 8001b02:	4013      	ands	r3, r2
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d002      	beq.n	8001b0e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e001      	b.n	8001b12 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001b12:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	3714      	adds	r7, #20
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr

08001b1e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	460b      	mov	r3, r1
 8001b28:	807b      	strh	r3, [r7, #2]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b2e:	787b      	ldrb	r3, [r7, #1]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b34:	887a      	ldrh	r2, [r7, #2]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001b3a:	e003      	b.n	8001b44 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001b3c:	887b      	ldrh	r3, [r7, #2]
 8001b3e:	041a      	lsls	r2, r3, #16
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	611a      	str	r2, [r3, #16]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bc80      	pop	{r7}
 8001b4c:	4770      	bx	lr
	...

08001b50 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b086      	sub	sp, #24
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d101      	bne.n	8001b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e272      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	f000 8087 	beq.w	8001c7e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b70:	4b92      	ldr	r3, [pc, #584]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 030c 	and.w	r3, r3, #12
 8001b78:	2b04      	cmp	r3, #4
 8001b7a:	d00c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b7c:	4b8f      	ldr	r3, [pc, #572]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f003 030c 	and.w	r3, r3, #12
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d112      	bne.n	8001bae <HAL_RCC_OscConfig+0x5e>
 8001b88:	4b8c      	ldr	r3, [pc, #560]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b94:	d10b      	bne.n	8001bae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b96:	4b89      	ldr	r3, [pc, #548]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d06c      	beq.n	8001c7c <HAL_RCC_OscConfig+0x12c>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d168      	bne.n	8001c7c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e24c      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bb6:	d106      	bne.n	8001bc6 <HAL_RCC_OscConfig+0x76>
 8001bb8:	4b80      	ldr	r3, [pc, #512]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	4a7f      	ldr	r2, [pc, #508]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001bbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc2:	6013      	str	r3, [r2, #0]
 8001bc4:	e02e      	b.n	8001c24 <HAL_RCC_OscConfig+0xd4>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10c      	bne.n	8001be8 <HAL_RCC_OscConfig+0x98>
 8001bce:	4b7b      	ldr	r3, [pc, #492]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a7a      	ldr	r2, [pc, #488]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	4b78      	ldr	r3, [pc, #480]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a77      	ldr	r2, [pc, #476]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001be0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be4:	6013      	str	r3, [r2, #0]
 8001be6:	e01d      	b.n	8001c24 <HAL_RCC_OscConfig+0xd4>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bf0:	d10c      	bne.n	8001c0c <HAL_RCC_OscConfig+0xbc>
 8001bf2:	4b72      	ldr	r3, [pc, #456]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a71      	ldr	r2, [pc, #452]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bfc:	6013      	str	r3, [r2, #0]
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6e      	ldr	r2, [pc, #440]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c08:	6013      	str	r3, [r2, #0]
 8001c0a:	e00b      	b.n	8001c24 <HAL_RCC_OscConfig+0xd4>
 8001c0c:	4b6b      	ldr	r3, [pc, #428]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a6a      	ldr	r2, [pc, #424]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	4b68      	ldr	r3, [pc, #416]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a67      	ldr	r2, [pc, #412]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c22:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d013      	beq.n	8001c54 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fc1c 	bl	8001468 <HAL_GetTick>
 8001c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c32:	e008      	b.n	8001c46 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c34:	f7ff fc18 	bl	8001468 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	693b      	ldr	r3, [r7, #16]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	2b64      	cmp	r3, #100	; 0x64
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e200      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c46:	4b5d      	ldr	r3, [pc, #372]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d0f0      	beq.n	8001c34 <HAL_RCC_OscConfig+0xe4>
 8001c52:	e014      	b.n	8001c7e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c54:	f7ff fc08 	bl	8001468 <HAL_GetTick>
 8001c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c5a:	e008      	b.n	8001c6e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c5c:	f7ff fc04 	bl	8001468 <HAL_GetTick>
 8001c60:	4602      	mov	r2, r0
 8001c62:	693b      	ldr	r3, [r7, #16]
 8001c64:	1ad3      	subs	r3, r2, r3
 8001c66:	2b64      	cmp	r3, #100	; 0x64
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e1ec      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c6e:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1f0      	bne.n	8001c5c <HAL_RCC_OscConfig+0x10c>
 8001c7a:	e000      	b.n	8001c7e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d063      	beq.n	8001d52 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c8a:	4b4c      	ldr	r3, [pc, #304]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	f003 030c 	and.w	r3, r3, #12
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d00b      	beq.n	8001cae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c96:	4b49      	ldr	r3, [pc, #292]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d11c      	bne.n	8001cdc <HAL_RCC_OscConfig+0x18c>
 8001ca2:	4b46      	ldr	r3, [pc, #280]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d116      	bne.n	8001cdc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cae:	4b43      	ldr	r3, [pc, #268]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d005      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x176>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d001      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e1c0      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	695b      	ldr	r3, [r3, #20]
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4939      	ldr	r1, [pc, #228]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001cda:	e03a      	b.n	8001d52 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	691b      	ldr	r3, [r3, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ce4:	4b36      	ldr	r3, [pc, #216]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cea:	f7ff fbbd 	bl	8001468 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cf2:	f7ff fbb9 	bl	8001468 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e1a1      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d04:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d0f0      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	695b      	ldr	r3, [r3, #20]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4927      	ldr	r1, [pc, #156]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	600b      	str	r3, [r1, #0]
 8001d24:	e015      	b.n	8001d52 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <HAL_RCC_OscConfig+0x270>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d2c:	f7ff fb9c 	bl	8001468 <HAL_GetTick>
 8001d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d32:	e008      	b.n	8001d46 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d34:	f7ff fb98 	bl	8001468 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d901      	bls.n	8001d46 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001d42:	2303      	movs	r3, #3
 8001d44:	e180      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001d46:	4b1d      	ldr	r3, [pc, #116]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d1f0      	bne.n	8001d34 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0308 	and.w	r3, r3, #8
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d03a      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	699b      	ldr	r3, [r3, #24]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d019      	beq.n	8001d9a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d66:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <HAL_RCC_OscConfig+0x274>)
 8001d68:	2201      	movs	r2, #1
 8001d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fb7c 	bl	8001468 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d74:	f7ff fb78 	bl	8001468 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e160      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_RCC_OscConfig+0x26c>)
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d92:	2001      	movs	r0, #1
 8001d94:	f000 fad8 	bl	8002348 <RCC_Delay>
 8001d98:	e01c      	b.n	8001dd4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001da0:	f7ff fb62 	bl	8001468 <HAL_GetTick>
 8001da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001da6:	e00f      	b.n	8001dc8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001da8:	f7ff fb5e 	bl	8001468 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d908      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e146      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	42420000 	.word	0x42420000
 8001dc4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001dc8:	4b92      	ldr	r3, [pc, #584]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	f003 0302 	and.w	r3, r3, #2
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d1e9      	bne.n	8001da8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a6 	beq.w	8001f2e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001de6:	4b8b      	ldr	r3, [pc, #556]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10d      	bne.n	8001e0e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	4b88      	ldr	r3, [pc, #544]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	4a87      	ldr	r2, [pc, #540]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dfc:	61d3      	str	r3, [r2, #28]
 8001dfe:	4b85      	ldr	r3, [pc, #532]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e00:	69db      	ldr	r3, [r3, #28]
 8001e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e0e:	4b82      	ldr	r3, [pc, #520]	; (8002018 <HAL_RCC_OscConfig+0x4c8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d118      	bne.n	8001e4c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001e1a:	4b7f      	ldr	r3, [pc, #508]	; (8002018 <HAL_RCC_OscConfig+0x4c8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a7e      	ldr	r2, [pc, #504]	; (8002018 <HAL_RCC_OscConfig+0x4c8>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e26:	f7ff fb1f 	bl	8001468 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7ff fb1b 	bl	8001468 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b64      	cmp	r3, #100	; 0x64
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e103      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e40:	4b75      	ldr	r3, [pc, #468]	; (8002018 <HAL_RCC_OscConfig+0x4c8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0f0      	beq.n	8001e2e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d106      	bne.n	8001e62 <HAL_RCC_OscConfig+0x312>
 8001e54:	4b6f      	ldr	r3, [pc, #444]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	4a6e      	ldr	r2, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e5a:	f043 0301 	orr.w	r3, r3, #1
 8001e5e:	6213      	str	r3, [r2, #32]
 8001e60:	e02d      	b.n	8001ebe <HAL_RCC_OscConfig+0x36e>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d10c      	bne.n	8001e84 <HAL_RCC_OscConfig+0x334>
 8001e6a:	4b6a      	ldr	r3, [pc, #424]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a69      	ldr	r2, [pc, #420]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e70:	f023 0301 	bic.w	r3, r3, #1
 8001e74:	6213      	str	r3, [r2, #32]
 8001e76:	4b67      	ldr	r3, [pc, #412]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	4a66      	ldr	r2, [pc, #408]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e7c:	f023 0304 	bic.w	r3, r3, #4
 8001e80:	6213      	str	r3, [r2, #32]
 8001e82:	e01c      	b.n	8001ebe <HAL_RCC_OscConfig+0x36e>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b05      	cmp	r3, #5
 8001e8a:	d10c      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x356>
 8001e8c:	4b61      	ldr	r3, [pc, #388]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e8e:	6a1b      	ldr	r3, [r3, #32]
 8001e90:	4a60      	ldr	r2, [pc, #384]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e92:	f043 0304 	orr.w	r3, r3, #4
 8001e96:	6213      	str	r3, [r2, #32]
 8001e98:	4b5e      	ldr	r3, [pc, #376]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	4a5d      	ldr	r2, [pc, #372]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6213      	str	r3, [r2, #32]
 8001ea4:	e00b      	b.n	8001ebe <HAL_RCC_OscConfig+0x36e>
 8001ea6:	4b5b      	ldr	r3, [pc, #364]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	4a5a      	ldr	r2, [pc, #360]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001eac:	f023 0301 	bic.w	r3, r3, #1
 8001eb0:	6213      	str	r3, [r2, #32]
 8001eb2:	4b58      	ldr	r3, [pc, #352]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	4a57      	ldr	r2, [pc, #348]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001eb8:	f023 0304 	bic.w	r3, r3, #4
 8001ebc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d015      	beq.n	8001ef2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec6:	f7ff facf 	bl	8001468 <HAL_GetTick>
 8001eca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ecc:	e00a      	b.n	8001ee4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ece:	f7ff facb 	bl	8001468 <HAL_GetTick>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	1ad3      	subs	r3, r2, r3
 8001ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e0b1      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ee4:	4b4b      	ldr	r3, [pc, #300]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001ee6:	6a1b      	ldr	r3, [r3, #32]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0ee      	beq.n	8001ece <HAL_RCC_OscConfig+0x37e>
 8001ef0:	e014      	b.n	8001f1c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7ff fab9 	bl	8001468 <HAL_GetTick>
 8001ef6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ef8:	e00a      	b.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001efa:	f7ff fab5 	bl	8001468 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d901      	bls.n	8001f10 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001f0c:	2303      	movs	r3, #3
 8001f0e:	e09b      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001f10:	4b40      	ldr	r3, [pc, #256]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001f12:	6a1b      	ldr	r3, [r3, #32]
 8001f14:	f003 0302 	and.w	r3, r3, #2
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d1ee      	bne.n	8001efa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001f1c:	7dfb      	ldrb	r3, [r7, #23]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d105      	bne.n	8001f2e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f22:	4b3c      	ldr	r3, [pc, #240]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a3b      	ldr	r2, [pc, #236]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	f000 8087 	beq.w	8002046 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f38:	4b36      	ldr	r3, [pc, #216]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 030c 	and.w	r3, r3, #12
 8001f40:	2b08      	cmp	r3, #8
 8001f42:	d061      	beq.n	8002008 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69db      	ldr	r3, [r3, #28]
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d146      	bne.n	8001fda <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f4c:	4b33      	ldr	r3, [pc, #204]	; (800201c <HAL_RCC_OscConfig+0x4cc>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7ff fa89 	bl	8001468 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5a:	f7ff fa85 	bl	8001468 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b02      	cmp	r3, #2
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e06d      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6c:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d1f0      	bne.n	8001f5a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6a1b      	ldr	r3, [r3, #32]
 8001f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f80:	d108      	bne.n	8001f94 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f82:	4b24      	ldr	r3, [pc, #144]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	4921      	ldr	r1, [pc, #132]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f94:	4b1f      	ldr	r3, [pc, #124]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6a19      	ldr	r1, [r3, #32]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	430b      	orrs	r3, r1
 8001fa6:	491b      	ldr	r1, [pc, #108]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001fac:	4b1b      	ldr	r3, [pc, #108]	; (800201c <HAL_RCC_OscConfig+0x4cc>)
 8001fae:	2201      	movs	r2, #1
 8001fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb2:	f7ff fa59 	bl	8001468 <HAL_GetTick>
 8001fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fba:	f7ff fa55 	bl	8001468 <HAL_GetTick>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b02      	cmp	r3, #2
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e03d      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0x46a>
 8001fd8:	e035      	b.n	8002046 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fda:	4b10      	ldr	r3, [pc, #64]	; (800201c <HAL_RCC_OscConfig+0x4cc>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe0:	f7ff fa42 	bl	8001468 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe8:	f7ff fa3e 	bl	8001468 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e026      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_RCC_OscConfig+0x4c4>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f0      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x498>
 8002006:	e01e      	b.n	8002046 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	2b01      	cmp	r3, #1
 800200e:	d107      	bne.n	8002020 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002010:	2301      	movs	r3, #1
 8002012:	e019      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
 8002014:	40021000 	.word	0x40021000
 8002018:	40007000 	.word	0x40007000
 800201c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_OscConfig+0x500>)
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6a1b      	ldr	r3, [r3, #32]
 8002030:	429a      	cmp	r2, r3
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800203e:	429a      	cmp	r2, r3
 8002040:	d001      	beq.n	8002046 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3718      	adds	r7, #24
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40021000 	.word	0x40021000

08002054 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d101      	bne.n	8002068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e0d0      	b.n	800220a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002068:	4b6a      	ldr	r3, [pc, #424]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	683a      	ldr	r2, [r7, #0]
 8002072:	429a      	cmp	r2, r3
 8002074:	d910      	bls.n	8002098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002076:	4b67      	ldr	r3, [pc, #412]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 0207 	bic.w	r2, r3, #7
 800207e:	4965      	ldr	r1, [pc, #404]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	4313      	orrs	r3, r2
 8002084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002086:	4b63      	ldr	r3, [pc, #396]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0307 	and.w	r3, r3, #7
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	429a      	cmp	r2, r3
 8002092:	d001      	beq.n	8002098 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	e0b8      	b.n	800220a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 0302 	and.w	r3, r3, #2
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d020      	beq.n	80020e6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d005      	beq.n	80020bc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	4a58      	ldr	r2, [pc, #352]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80020b6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80020ba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d005      	beq.n	80020d4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80020c8:	4b53      	ldr	r3, [pc, #332]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	4a52      	ldr	r2, [pc, #328]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80020ce:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80020d2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d4:	4b50      	ldr	r3, [pc, #320]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	494d      	ldr	r1, [pc, #308]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d040      	beq.n	8002174 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d107      	bne.n	800210a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fa:	4b47      	ldr	r3, [pc, #284]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002102:	2b00      	cmp	r3, #0
 8002104:	d115      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e07f      	b.n	800220a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d107      	bne.n	8002122 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002112:	4b41      	ldr	r3, [pc, #260]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	e073      	b.n	800220a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002122:	4b3d      	ldr	r3, [pc, #244]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e06b      	b.n	800220a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002132:	4b39      	ldr	r3, [pc, #228]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f023 0203 	bic.w	r2, r3, #3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	4936      	ldr	r1, [pc, #216]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 8002140:	4313      	orrs	r3, r2
 8002142:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002144:	f7ff f990 	bl	8001468 <HAL_GetTick>
 8002148:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214a:	e00a      	b.n	8002162 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800214c:	f7ff f98c 	bl	8001468 <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	f241 3288 	movw	r2, #5000	; 0x1388
 800215a:	4293      	cmp	r3, r2
 800215c:	d901      	bls.n	8002162 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e053      	b.n	800220a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002162:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 020c 	and.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	429a      	cmp	r2, r3
 8002172:	d1eb      	bne.n	800214c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002174:	4b27      	ldr	r3, [pc, #156]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	683a      	ldr	r2, [r7, #0]
 800217e:	429a      	cmp	r2, r3
 8002180:	d210      	bcs.n	80021a4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002182:	4b24      	ldr	r3, [pc, #144]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f023 0207 	bic.w	r2, r3, #7
 800218a:	4922      	ldr	r1, [pc, #136]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	4313      	orrs	r3, r2
 8002190:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002192:	4b20      	ldr	r3, [pc, #128]	; (8002214 <HAL_RCC_ClockConfig+0x1c0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d001      	beq.n	80021a4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	e032      	b.n	800220a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021b0:	4b19      	ldr	r3, [pc, #100]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	4916      	ldr	r1, [pc, #88]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0308 	and.w	r3, r3, #8
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d009      	beq.n	80021e2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ce:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	691b      	ldr	r3, [r3, #16]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	490e      	ldr	r1, [pc, #56]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80021e2:	f000 f821 	bl	8002228 <HAL_RCC_GetSysClockFreq>
 80021e6:	4602      	mov	r2, r0
 80021e8:	4b0b      	ldr	r3, [pc, #44]	; (8002218 <HAL_RCC_ClockConfig+0x1c4>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	091b      	lsrs	r3, r3, #4
 80021ee:	f003 030f 	and.w	r3, r3, #15
 80021f2:	490a      	ldr	r1, [pc, #40]	; (800221c <HAL_RCC_ClockConfig+0x1c8>)
 80021f4:	5ccb      	ldrb	r3, [r1, r3]
 80021f6:	fa22 f303 	lsr.w	r3, r2, r3
 80021fa:	4a09      	ldr	r2, [pc, #36]	; (8002220 <HAL_RCC_ClockConfig+0x1cc>)
 80021fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021fe:	4b09      	ldr	r3, [pc, #36]	; (8002224 <HAL_RCC_ClockConfig+0x1d0>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7ff f8ee 	bl	80013e4 <HAL_InitTick>

  return HAL_OK;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3710      	adds	r7, #16
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40022000 	.word	0x40022000
 8002218:	40021000 	.word	0x40021000
 800221c:	08003edc 	.word	0x08003edc
 8002220:	20000060 	.word	0x20000060
 8002224:	2000006c 	.word	0x2000006c

08002228 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002228:	b490      	push	{r4, r7}
 800222a:	b08a      	sub	sp, #40	; 0x28
 800222c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800222e:	4b29      	ldr	r3, [pc, #164]	; (80022d4 <HAL_RCC_GetSysClockFreq+0xac>)
 8002230:	1d3c      	adds	r4, r7, #4
 8002232:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002234:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002238:	f240 2301 	movw	r3, #513	; 0x201
 800223c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800223e:	2300      	movs	r3, #0
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	2300      	movs	r3, #0
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	2300      	movs	r3, #0
 8002248:	627b      	str	r3, [r7, #36]	; 0x24
 800224a:	2300      	movs	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800224e:	2300      	movs	r3, #0
 8002250:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002252:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002258:	69fb      	ldr	r3, [r7, #28]
 800225a:	f003 030c 	and.w	r3, r3, #12
 800225e:	2b04      	cmp	r3, #4
 8002260:	d002      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x40>
 8002262:	2b08      	cmp	r3, #8
 8002264:	d003      	beq.n	800226e <HAL_RCC_GetSysClockFreq+0x46>
 8002266:	e02b      	b.n	80022c0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <HAL_RCC_GetSysClockFreq+0xb4>)
 800226a:	623b      	str	r3, [r7, #32]
      break;
 800226c:	e02b      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	0c9b      	lsrs	r3, r3, #18
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3328      	adds	r3, #40	; 0x28
 8002278:	443b      	add	r3, r7
 800227a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800227e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002280:	69fb      	ldr	r3, [r7, #28]
 8002282:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d012      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800228a:	4b13      	ldr	r3, [pc, #76]	; (80022d8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	0c5b      	lsrs	r3, r3, #17
 8002290:	f003 0301 	and.w	r3, r3, #1
 8002294:	3328      	adds	r3, #40	; 0x28
 8002296:	443b      	add	r3, r7
 8002298:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800229c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	4a0e      	ldr	r2, [pc, #56]	; (80022dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80022a2:	fb03 f202 	mul.w	r2, r3, r2
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ac:	627b      	str	r3, [r7, #36]	; 0x24
 80022ae:	e004      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	4a0b      	ldr	r2, [pc, #44]	; (80022e0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80022b4:	fb02 f303 	mul.w	r3, r2, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	623b      	str	r3, [r7, #32]
      break;
 80022be:	e002      	b.n	80022c6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_GetSysClockFreq+0xb4>)
 80022c2:	623b      	str	r3, [r7, #32]
      break;
 80022c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022c6:	6a3b      	ldr	r3, [r7, #32]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3728      	adds	r7, #40	; 0x28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bc90      	pop	{r4, r7}
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	08003ecc 	.word	0x08003ecc
 80022d8:	40021000 	.word	0x40021000
 80022dc:	007a1200 	.word	0x007a1200
 80022e0:	003d0900 	.word	0x003d0900

080022e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022e8:	4b02      	ldr	r3, [pc, #8]	; (80022f4 <HAL_RCC_GetHCLKFreq+0x10>)
 80022ea:	681b      	ldr	r3, [r3, #0]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bc80      	pop	{r7}
 80022f2:	4770      	bx	lr
 80022f4:	20000060 	.word	0x20000060

080022f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022fc:	f7ff fff2 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002300:	4602      	mov	r2, r0
 8002302:	4b05      	ldr	r3, [pc, #20]	; (8002318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	0a1b      	lsrs	r3, r3, #8
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	4903      	ldr	r1, [pc, #12]	; (800231c <HAL_RCC_GetPCLK1Freq+0x24>)
 800230e:	5ccb      	ldrb	r3, [r1, r3]
 8002310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002314:	4618      	mov	r0, r3
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	08003eec 	.word	0x08003eec

08002320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002324:	f7ff ffde 	bl	80022e4 <HAL_RCC_GetHCLKFreq>
 8002328:	4602      	mov	r2, r0
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	0adb      	lsrs	r3, r3, #11
 8002330:	f003 0307 	and.w	r3, r3, #7
 8002334:	4903      	ldr	r1, [pc, #12]	; (8002344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002336:	5ccb      	ldrb	r3, [r1, r3]
 8002338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	bd80      	pop	{r7, pc}
 8002340:	40021000 	.word	0x40021000
 8002344:	08003eec 	.word	0x08003eec

08002348 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002348:	b480      	push	{r7}
 800234a:	b085      	sub	sp, #20
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002350:	4b0a      	ldr	r3, [pc, #40]	; (800237c <RCC_Delay+0x34>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a0a      	ldr	r2, [pc, #40]	; (8002380 <RCC_Delay+0x38>)
 8002356:	fba2 2303 	umull	r2, r3, r2, r3
 800235a:	0a5b      	lsrs	r3, r3, #9
 800235c:	687a      	ldr	r2, [r7, #4]
 800235e:	fb02 f303 	mul.w	r3, r2, r3
 8002362:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002364:	bf00      	nop
  }
  while (Delay --);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	1e5a      	subs	r2, r3, #1
 800236a:	60fa      	str	r2, [r7, #12]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1f9      	bne.n	8002364 <RCC_Delay+0x1c>
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr
 800237c:	20000060 	.word	0x20000060
 8002380:	10624dd3 	.word	0x10624dd3

08002384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e041      	b.n	800241a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fe04 	bl	8000fb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2202      	movs	r2, #2
 80023b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	4619      	mov	r1, r3
 80023c2:	4610      	mov	r0, r2
 80023c4:	f000 fa6a 	bl	800289c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2201      	movs	r2, #1
 80023cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2201      	movs	r2, #1
 80023d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3708      	adds	r7, #8
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
	...

08002424 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002424:	b480      	push	{r7}
 8002426:	b085      	sub	sp, #20
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002432:	b2db      	uxtb	r3, r3
 8002434:	2b01      	cmp	r3, #1
 8002436:	d001      	beq.n	800243c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e035      	b.n	80024a8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2202      	movs	r2, #2
 8002440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0201 	orr.w	r2, r2, #1
 8002452:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a16      	ldr	r2, [pc, #88]	; (80024b4 <HAL_TIM_Base_Start_IT+0x90>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d009      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x4e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002466:	d004      	beq.n	8002472 <HAL_TIM_Base_Start_IT+0x4e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a12      	ldr	r2, [pc, #72]	; (80024b8 <HAL_TIM_Base_Start_IT+0x94>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d111      	bne.n	8002496 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2b06      	cmp	r3, #6
 8002482:	d010      	beq.n	80024a6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f042 0201 	orr.w	r2, r2, #1
 8002492:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002494:	e007      	b.n	80024a6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f042 0201 	orr.w	r2, r2, #1
 80024a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3714      	adds	r7, #20
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc80      	pop	{r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40012c00 	.word	0x40012c00
 80024b8:	40000400 	.word	0x40000400

080024bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	691b      	ldr	r3, [r3, #16]
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d122      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0302 	and.w	r3, r3, #2
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d11b      	bne.n	8002518 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f06f 0202 	mvn.w	r2, #2
 80024e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2201      	movs	r2, #1
 80024ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	699b      	ldr	r3, [r3, #24]
 80024f6:	f003 0303 	and.w	r3, r3, #3
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d003      	beq.n	8002506 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f9b1 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002504:	e005      	b.n	8002512 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002506:	6878      	ldr	r0, [r7, #4]
 8002508:	f000 f9a4 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800250c:	6878      	ldr	r0, [r7, #4]
 800250e:	f000 f9b3 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2200      	movs	r2, #0
 8002516:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	691b      	ldr	r3, [r3, #16]
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	2b04      	cmp	r3, #4
 8002524:	d122      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b04      	cmp	r3, #4
 8002532:	d11b      	bne.n	800256c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f06f 0204 	mvn.w	r2, #4
 800253c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2202      	movs	r2, #2
 8002542:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254e:	2b00      	cmp	r3, #0
 8002550:	d003      	beq.n	800255a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f987 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002558:	e005      	b.n	8002566 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 f97a 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f989 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d122      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b08      	cmp	r3, #8
 8002586:	d11b      	bne.n	80025c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f06f 0208 	mvn.w	r2, #8
 8002590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2204      	movs	r2, #4
 8002596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	69db      	ldr	r3, [r3, #28]
 800259e:	f003 0303 	and.w	r3, r3, #3
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f95d 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 80025ac:	e005      	b.n	80025ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ae:	6878      	ldr	r0, [r7, #4]
 80025b0:	f000 f950 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f95f 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	f003 0310 	and.w	r3, r3, #16
 80025ca:	2b10      	cmp	r3, #16
 80025cc:	d122      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68db      	ldr	r3, [r3, #12]
 80025d4:	f003 0310 	and.w	r3, r3, #16
 80025d8:	2b10      	cmp	r3, #16
 80025da:	d11b      	bne.n	8002614 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f06f 0210 	mvn.w	r2, #16
 80025e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2208      	movs	r2, #8
 80025ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	69db      	ldr	r3, [r3, #28]
 80025f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d003      	beq.n	8002602 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f933 	bl	8002866 <HAL_TIM_IC_CaptureCallback>
 8002600:	e005      	b.n	800260e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f000 f926 	bl	8002854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f000 f935 	bl	8002878 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2200      	movs	r2, #0
 8002612:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	691b      	ldr	r3, [r3, #16]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d10e      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	f003 0301 	and.w	r3, r3, #1
 800262c:	2b01      	cmp	r3, #1
 800262e:	d107      	bne.n	8002640 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f06f 0201 	mvn.w	r2, #1
 8002638:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7fe fc82 	bl	8000f44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	691b      	ldr	r3, [r3, #16]
 8002646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800264a:	2b80      	cmp	r3, #128	; 0x80
 800264c:	d10e      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	d107      	bne.n	800266c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002664:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	f000 fa67 	bl	8002b3a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002676:	2b40      	cmp	r3, #64	; 0x40
 8002678:	d10e      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d107      	bne.n	8002698 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002690:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f8f9 	bl	800288a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	f003 0320 	and.w	r3, r3, #32
 80026a2:	2b20      	cmp	r3, #32
 80026a4:	d10e      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	68db      	ldr	r3, [r3, #12]
 80026ac:	f003 0320 	and.w	r3, r3, #32
 80026b0:	2b20      	cmp	r3, #32
 80026b2:	d107      	bne.n	80026c4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f06f 0220 	mvn.w	r2, #32
 80026bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa32 	bl	8002b28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026c4:	bf00      	nop
 80026c6:	3708      	adds	r7, #8
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bd80      	pop	{r7, pc}

080026cc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_TIM_ConfigClockSource+0x18>
 80026e0:	2302      	movs	r3, #2
 80026e2:	e0b3      	b.n	800284c <HAL_TIM_ConfigClockSource+0x180>
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2201      	movs	r2, #1
 80026e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2202      	movs	r2, #2
 80026f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002702:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800270a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	68fa      	ldr	r2, [r7, #12]
 8002712:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800271c:	d03e      	beq.n	800279c <HAL_TIM_ConfigClockSource+0xd0>
 800271e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002722:	f200 8087 	bhi.w	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800272a:	f000 8085 	beq.w	8002838 <HAL_TIM_ConfigClockSource+0x16c>
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002732:	d87f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002734:	2b70      	cmp	r3, #112	; 0x70
 8002736:	d01a      	beq.n	800276e <HAL_TIM_ConfigClockSource+0xa2>
 8002738:	2b70      	cmp	r3, #112	; 0x70
 800273a:	d87b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 800273c:	2b60      	cmp	r3, #96	; 0x60
 800273e:	d050      	beq.n	80027e2 <HAL_TIM_ConfigClockSource+0x116>
 8002740:	2b60      	cmp	r3, #96	; 0x60
 8002742:	d877      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002744:	2b50      	cmp	r3, #80	; 0x50
 8002746:	d03c      	beq.n	80027c2 <HAL_TIM_ConfigClockSource+0xf6>
 8002748:	2b50      	cmp	r3, #80	; 0x50
 800274a:	d873      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 800274c:	2b40      	cmp	r3, #64	; 0x40
 800274e:	d058      	beq.n	8002802 <HAL_TIM_ConfigClockSource+0x136>
 8002750:	2b40      	cmp	r3, #64	; 0x40
 8002752:	d86f      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002754:	2b30      	cmp	r3, #48	; 0x30
 8002756:	d064      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
 8002758:	2b30      	cmp	r3, #48	; 0x30
 800275a:	d86b      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 800275c:	2b20      	cmp	r3, #32
 800275e:	d060      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
 8002760:	2b20      	cmp	r3, #32
 8002762:	d867      	bhi.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
 8002764:	2b00      	cmp	r3, #0
 8002766:	d05c      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
 8002768:	2b10      	cmp	r3, #16
 800276a:	d05a      	beq.n	8002822 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800276c:	e062      	b.n	8002834 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6818      	ldr	r0, [r3, #0]
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	6899      	ldr	r1, [r3, #8]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f000 f95c 	bl	8002a3a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002790:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	609a      	str	r2, [r3, #8]
      break;
 800279a:	e04e      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6818      	ldr	r0, [r3, #0]
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	6899      	ldr	r1, [r3, #8]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f000 f945 	bl	8002a3a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80027be:	609a      	str	r2, [r3, #8]
      break;
 80027c0:	e03b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6818      	ldr	r0, [r3, #0]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6859      	ldr	r1, [r3, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	461a      	mov	r2, r3
 80027d0:	f000 f8bc 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2150      	movs	r1, #80	; 0x50
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f913 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 80027e0:	e02b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6818      	ldr	r0, [r3, #0]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	6859      	ldr	r1, [r3, #4]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	461a      	mov	r2, r3
 80027f0:	f000 f8da 	bl	80029a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2160      	movs	r1, #96	; 0x60
 80027fa:	4618      	mov	r0, r3
 80027fc:	f000 f903 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 8002800:	e01b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6818      	ldr	r0, [r3, #0]
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	6859      	ldr	r1, [r3, #4]
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	68db      	ldr	r3, [r3, #12]
 800280e:	461a      	mov	r2, r3
 8002810:	f000 f89c 	bl	800294c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2140      	movs	r1, #64	; 0x40
 800281a:	4618      	mov	r0, r3
 800281c:	f000 f8f3 	bl	8002a06 <TIM_ITRx_SetConfig>
      break;
 8002820:	e00b      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681a      	ldr	r2, [r3, #0]
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4619      	mov	r1, r3
 800282c:	4610      	mov	r0, r2
 800282e:	f000 f8ea 	bl	8002a06 <TIM_ITRx_SetConfig>
        break;
 8002832:	e002      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002834:	bf00      	nop
 8002836:	e000      	b.n	800283a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002838:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2201      	movs	r2, #1
 800283e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	bc80      	pop	{r7}
 8002876:	4770      	bx	lr

08002878 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002878:	b480      	push	{r7}
 800287a:	b083      	sub	sp, #12
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	bc80      	pop	{r7}
 8002888:	4770      	bx	lr

0800288a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800288a:	b480      	push	{r7}
 800288c:	b083      	sub	sp, #12
 800288e:	af00      	add	r7, sp, #0
 8002890:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002892:	bf00      	nop
 8002894:	370c      	adds	r7, #12
 8002896:	46bd      	mov	sp, r7
 8002898:	bc80      	pop	{r7}
 800289a:	4770      	bx	lr

0800289c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800289c:	b480      	push	{r7}
 800289e:	b085      	sub	sp, #20
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	4a25      	ldr	r2, [pc, #148]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d007      	beq.n	80028c4 <TIM_Base_SetConfig+0x28>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028ba:	d003      	beq.n	80028c4 <TIM_Base_SetConfig+0x28>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a22      	ldr	r2, [pc, #136]	; (8002948 <TIM_Base_SetConfig+0xac>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	d108      	bne.n	80028d6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	68fa      	ldr	r2, [r7, #12]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d007      	beq.n	80028ee <TIM_Base_SetConfig+0x52>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e4:	d003      	beq.n	80028ee <TIM_Base_SetConfig+0x52>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a17      	ldr	r2, [pc, #92]	; (8002948 <TIM_Base_SetConfig+0xac>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d108      	bne.n	8002900 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68db      	ldr	r3, [r3, #12]
 80028fa:	68fa      	ldr	r2, [r7, #12]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	695b      	ldr	r3, [r3, #20]
 800290a:	4313      	orrs	r3, r2
 800290c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	4a07      	ldr	r2, [pc, #28]	; (8002944 <TIM_Base_SetConfig+0xa8>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d103      	bne.n	8002934 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	691a      	ldr	r2, [r3, #16]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	615a      	str	r2, [r3, #20]
}
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	40012c00 	.word	0x40012c00
 8002948:	40000400 	.word	0x40000400

0800294c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a1b      	ldr	r3, [r3, #32]
 800295c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	f023 0201 	bic.w	r2, r3, #1
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002976:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	011b      	lsls	r3, r3, #4
 800297c:	693a      	ldr	r2, [r7, #16]
 800297e:	4313      	orrs	r3, r2
 8002980:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	f023 030a 	bic.w	r3, r3, #10
 8002988:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	4313      	orrs	r3, r2
 8002990:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	693a      	ldr	r2, [r7, #16]
 8002996:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	621a      	str	r2, [r3, #32]
}
 800299e:	bf00      	nop
 80029a0:	371c      	adds	r7, #28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	6a1b      	ldr	r3, [r3, #32]
 80029b8:	f023 0210 	bic.w	r2, r3, #16
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	031b      	lsls	r3, r3, #12
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	4313      	orrs	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80029e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	011b      	lsls	r3, r3, #4
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	693a      	ldr	r2, [r7, #16]
 80029fa:	621a      	str	r2, [r3, #32]
}
 80029fc:	bf00      	nop
 80029fe:	371c      	adds	r7, #28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr

08002a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a06:	b480      	push	{r7}
 8002a08:	b085      	sub	sp, #20
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a1e:	683a      	ldr	r2, [r7, #0]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	f043 0307 	orr.w	r3, r3, #7
 8002a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	609a      	str	r2, [r3, #8]
}
 8002a30:	bf00      	nop
 8002a32:	3714      	adds	r7, #20
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bc80      	pop	{r7}
 8002a38:	4770      	bx	lr

08002a3a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a3a:	b480      	push	{r7}
 8002a3c:	b087      	sub	sp, #28
 8002a3e:	af00      	add	r7, sp, #0
 8002a40:	60f8      	str	r0, [r7, #12]
 8002a42:	60b9      	str	r1, [r7, #8]
 8002a44:	607a      	str	r2, [r7, #4]
 8002a46:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002a54:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	021a      	lsls	r2, r3, #8
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	4313      	orrs	r3, r2
 8002a62:	697a      	ldr	r2, [r7, #20]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	697a      	ldr	r2, [r7, #20]
 8002a6c:	609a      	str	r2, [r3, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	371c      	adds	r7, #28
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d101      	bne.n	8002a90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	e041      	b.n	8002b14 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2202      	movs	r2, #2
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ab6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	68fa      	ldr	r2, [r7, #12]
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a14      	ldr	r2, [pc, #80]	; (8002b20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d009      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002adc:	d004      	beq.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a10      	ldr	r2, [pc, #64]	; (8002b24 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d10c      	bne.n	8002b02 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	68ba      	ldr	r2, [r7, #8]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	68ba      	ldr	r2, [r7, #8]
 8002b00:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bc80      	pop	{r7}
 8002b1c:	4770      	bx	lr
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40000400 	.word	0x40000400

08002b28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bc80      	pop	{r7}
 8002b38:	4770      	bx	lr

08002b3a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b3a:	b480      	push	{r7}
 8002b3c:	b083      	sub	sp, #12
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b42:	bf00      	nop
 8002b44:	370c      	adds	r7, #12
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e03f      	b.n	8002bde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b64:	b2db      	uxtb	r3, r3
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d106      	bne.n	8002b78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7fe fa44 	bl	8001000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2224      	movs	r2, #36	; 0x24
 8002b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b90:	6878      	ldr	r0, [r7, #4]
 8002b92:	f000 fc25 	bl	80033e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691a      	ldr	r2, [r3, #16]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ba4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695a      	ldr	r2, [r3, #20]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002bb4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	68da      	ldr	r2, [r3, #12]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002bc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2200      	movs	r2, #0
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3708      	adds	r7, #8
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b08a      	sub	sp, #40	; 0x28
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	60f8      	str	r0, [r7, #12]
 8002bee:	60b9      	str	r1, [r7, #8]
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b20      	cmp	r3, #32
 8002c04:	d17c      	bne.n	8002d00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d002      	beq.n	8002c12 <HAL_UART_Transmit+0x2c>
 8002c0c:	88fb      	ldrh	r3, [r7, #6]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d101      	bne.n	8002c16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002c12:	2301      	movs	r3, #1
 8002c14:	e075      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d101      	bne.n	8002c24 <HAL_UART_Transmit+0x3e>
 8002c20:	2302      	movs	r3, #2
 8002c22:	e06e      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2200      	movs	r2, #0
 8002c30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2221      	movs	r2, #33	; 0x21
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c3a:	f7fe fc15 	bl	8001468 <HAL_GetTick>
 8002c3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	88fa      	ldrh	r2, [r7, #6]
 8002c44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	88fa      	ldrh	r2, [r7, #6]
 8002c4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c54:	d108      	bne.n	8002c68 <HAL_UART_Transmit+0x82>
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d104      	bne.n	8002c68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	e003      	b.n	8002c70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8002c78:	e02a      	b.n	8002cd0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	9300      	str	r3, [sp, #0]
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2200      	movs	r2, #0
 8002c82:	2180      	movs	r1, #128	; 0x80
 8002c84:	68f8      	ldr	r0, [r7, #12]
 8002c86:	f000 fa11 	bl	80030ac <UART_WaitOnFlagUntilTimeout>
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d001      	beq.n	8002c94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002c90:	2303      	movs	r3, #3
 8002c92:	e036      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d10b      	bne.n	8002cb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c9a:	69bb      	ldr	r3, [r7, #24]
 8002c9c:	881b      	ldrh	r3, [r3, #0]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ca8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002caa:	69bb      	ldr	r3, [r7, #24]
 8002cac:	3302      	adds	r3, #2
 8002cae:	61bb      	str	r3, [r7, #24]
 8002cb0:	e007      	b.n	8002cc2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	781a      	ldrb	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1cf      	bne.n	8002c7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	2140      	movs	r1, #64	; 0x40
 8002ce4:	68f8      	ldr	r0, [r7, #12]
 8002ce6:	f000 f9e1 	bl	80030ac <UART_WaitOnFlagUntilTimeout>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e006      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	e000      	b.n	8002d02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002d00:	2302      	movs	r3, #2
  }
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
	...

08002d0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b08a      	sub	sp, #40	; 0x28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002d30:	2300      	movs	r3, #0
 8002d32:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	f003 030f 	and.w	r3, r3, #15
 8002d3a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d10d      	bne.n	8002d5e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d008      	beq.n	8002d5e <HAL_UART_IRQHandler+0x52>
 8002d4c:	6a3b      	ldr	r3, [r7, #32]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa99 	bl	800328e <UART_Receive_IT>
      return;
 8002d5c:	e17b      	b.n	8003056 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80b1 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x1bc>
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	f003 0301 	and.w	r3, r3, #1
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_UART_IRQHandler+0x70>
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	f000 80a6 	beq.w	8002ec8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <HAL_UART_IRQHandler+0x90>
 8002d86:	6a3b      	ldr	r3, [r7, #32]
 8002d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d005      	beq.n	8002d9c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d94:	f043 0201 	orr.w	r2, r3, #1
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	f003 0304 	and.w	r3, r3, #4
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d00a      	beq.n	8002dbc <HAL_UART_IRQHandler+0xb0>
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0301 	and.w	r3, r3, #1
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d005      	beq.n	8002dbc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db4:	f043 0202 	orr.w	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00a      	beq.n	8002ddc <HAL_UART_IRQHandler+0xd0>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d005      	beq.n	8002ddc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd4:	f043 0204 	orr.w	r2, r3, #4
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	f003 0308 	and.w	r3, r3, #8
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00f      	beq.n	8002e06 <HAL_UART_IRQHandler+0xfa>
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	f003 0320 	and.w	r3, r3, #32
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d104      	bne.n	8002dfa <HAL_UART_IRQHandler+0xee>
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d005      	beq.n	8002e06 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfe:	f043 0208 	orr.w	r2, r3, #8
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 811e 	beq.w	800304c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e12:	f003 0320 	and.w	r3, r3, #32
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d007      	beq.n	8002e2a <HAL_UART_IRQHandler+0x11e>
 8002e1a:	6a3b      	ldr	r3, [r7, #32]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d002      	beq.n	8002e2a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 fa32 	bl	800328e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	695b      	ldr	r3, [r3, #20]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf14      	ite	ne
 8002e38:	2301      	movne	r3, #1
 8002e3a:	2300      	moveq	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e44:	f003 0308 	and.w	r3, r3, #8
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d102      	bne.n	8002e52 <HAL_UART_IRQHandler+0x146>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d031      	beq.n	8002eb6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f974 	bl	8003140 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d023      	beq.n	8002eae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695a      	ldr	r2, [r3, #20]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e74:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d013      	beq.n	8002ea6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e82:	4a76      	ldr	r2, [pc, #472]	; (800305c <HAL_UART_IRQHandler+0x350>)
 8002e84:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f7fe fc3e 	bl	800170c <HAL_DMA_Abort_IT>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d016      	beq.n	8002ec4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ea0:	4610      	mov	r0, r2
 8002ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ea4:	e00e      	b.n	8002ec4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8ec 	bl	8003084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eac:	e00a      	b.n	8002ec4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 f8e8 	bl	8003084 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb4:	e006      	b.n	8002ec4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f8e4 	bl	8003084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002ec2:	e0c3      	b.n	800304c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ec4:	bf00      	nop
    return;
 8002ec6:	e0c1      	b.n	800304c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	f040 80a1 	bne.w	8003014 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8002ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed4:	f003 0310 	and.w	r3, r3, #16
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	f000 809b 	beq.w	8003014 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f003 0310 	and.w	r3, r3, #16
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	f000 8095 	beq.w	8003014 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002eea:	2300      	movs	r3, #0
 8002eec:	60fb      	str	r3, [r7, #12]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	60fb      	str	r3, [r7, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695b      	ldr	r3, [r3, #20]
 8002f06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d04e      	beq.n	8002fac <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685b      	ldr	r3, [r3, #4]
 8002f16:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8002f18:	8a3b      	ldrh	r3, [r7, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8098 	beq.w	8003050 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002f24:	8a3a      	ldrh	r2, [r7, #16]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	f080 8092 	bcs.w	8003050 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	8a3a      	ldrh	r2, [r7, #16]
 8002f30:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f36:	699b      	ldr	r3, [r3, #24]
 8002f38:	2b20      	cmp	r3, #32
 8002f3a:	d02b      	beq.n	8002f94 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f4a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f022 0201 	bic.w	r2, r2, #1
 8002f5a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	695a      	ldr	r2, [r3, #20]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f6a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2220      	movs	r2, #32
 8002f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	68da      	ldr	r2, [r3, #12]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0210 	bic.w	r2, r2, #16
 8002f88:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f7fe fb81 	bl	8001696 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	1ad3      	subs	r3, r2, r3
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	6878      	ldr	r0, [r7, #4]
 8002fa6:	f000 f876 	bl	8003096 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002faa:	e051      	b.n	8003050 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002fbe:	b29b      	uxth	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d047      	beq.n	8003054 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002fc4:	8a7b      	ldrh	r3, [r7, #18]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d044      	beq.n	8003054 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68da      	ldr	r2, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fd8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	695a      	ldr	r2, [r3, #20]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f022 0201 	bic.w	r2, r2, #1
 8002fe8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2220      	movs	r2, #32
 8002fee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f022 0210 	bic.w	r2, r2, #16
 8003006:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003008:	8a7b      	ldrh	r3, [r7, #18]
 800300a:	4619      	mov	r1, r3
 800300c:	6878      	ldr	r0, [r7, #4]
 800300e:	f000 f842 	bl	8003096 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003012:	e01f      	b.n	8003054 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800301a:	2b00      	cmp	r3, #0
 800301c:	d008      	beq.n	8003030 <HAL_UART_IRQHandler+0x324>
 800301e:	6a3b      	ldr	r3, [r7, #32]
 8003020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f8c9 	bl	80031c0 <UART_Transmit_IT>
    return;
 800302e:	e012      	b.n	8003056 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003032:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00d      	beq.n	8003056 <HAL_UART_IRQHandler+0x34a>
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f90a 	bl	800325e <UART_EndTransmit_IT>
    return;
 800304a:	e004      	b.n	8003056 <HAL_UART_IRQHandler+0x34a>
    return;
 800304c:	bf00      	nop
 800304e:	e002      	b.n	8003056 <HAL_UART_IRQHandler+0x34a>
      return;
 8003050:	bf00      	nop
 8003052:	e000      	b.n	8003056 <HAL_UART_IRQHandler+0x34a>
      return;
 8003054:	bf00      	nop
  }
}
 8003056:	3728      	adds	r7, #40	; 0x28
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	08003199 	.word	0x08003199

08003060 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	bc80      	pop	{r7}
 8003070:	4770      	bx	lr

08003072 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003072:	b480      	push	{r7}
 8003074:	b083      	sub	sp, #12
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800307a:	bf00      	nop
 800307c:	370c      	adds	r7, #12
 800307e:	46bd      	mov	sp, r7
 8003080:	bc80      	pop	{r7}
 8003082:	4770      	bx	lr

08003084 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800308c:	bf00      	nop
 800308e:	370c      	adds	r7, #12
 8003090:	46bd      	mov	sp, r7
 8003092:	bc80      	pop	{r7}
 8003094:	4770      	bx	lr

08003096 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003096:	b480      	push	{r7}
 8003098:	b083      	sub	sp, #12
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	460b      	mov	r3, r1
 80030a0:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80030a2:	bf00      	nop
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bc80      	pop	{r7}
 80030aa:	4770      	bx	lr

080030ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	60b9      	str	r1, [r7, #8]
 80030b6:	603b      	str	r3, [r7, #0]
 80030b8:	4613      	mov	r3, r2
 80030ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030bc:	e02c      	b.n	8003118 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030be:	69bb      	ldr	r3, [r7, #24]
 80030c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030c4:	d028      	beq.n	8003118 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d007      	beq.n	80030dc <UART_WaitOnFlagUntilTimeout+0x30>
 80030cc:	f7fe f9cc 	bl	8001468 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	429a      	cmp	r2, r3
 80030da:	d21d      	bcs.n	8003118 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68da      	ldr	r2, [r3, #12]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80030ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	695a      	ldr	r2, [r3, #20]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f022 0201 	bic.w	r2, r2, #1
 80030fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2220      	movs	r2, #32
 8003100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2220      	movs	r2, #32
 8003108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e00f      	b.n	8003138 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	4013      	ands	r3, r2
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	429a      	cmp	r2, r3
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	461a      	mov	r2, r3
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	429a      	cmp	r2, r3
 8003134:	d0c3      	beq.n	80030be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68da      	ldr	r2, [r3, #12]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003156:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	695a      	ldr	r2, [r3, #20]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0201 	bic.w	r2, r2, #1
 8003166:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	68da      	ldr	r2, [r3, #12]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f022 0210 	bic.w	r2, r2, #16
 800317e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2220      	movs	r2, #32
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	bc80      	pop	{r7}
 8003196:	4770      	bx	lr

08003198 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2200      	movs	r2, #0
 80031aa:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2200      	movs	r2, #0
 80031b0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80031b2:	68f8      	ldr	r0, [r7, #12]
 80031b4:	f7ff ff66 	bl	8003084 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80031b8:	bf00      	nop
 80031ba:	3710      	adds	r7, #16
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b085      	sub	sp, #20
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	2b21      	cmp	r3, #33	; 0x21
 80031d2:	d13e      	bne.n	8003252 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031dc:	d114      	bne.n	8003208 <UART_Transmit_IT+0x48>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	691b      	ldr	r3, [r3, #16]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d110      	bne.n	8003208 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a1b      	ldr	r3, [r3, #32]
 80031ea:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	881b      	ldrh	r3, [r3, #0]
 80031f0:	461a      	mov	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80031fa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a1b      	ldr	r3, [r3, #32]
 8003200:	1c9a      	adds	r2, r3, #2
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	621a      	str	r2, [r3, #32]
 8003206:	e008      	b.n	800321a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a1b      	ldr	r3, [r3, #32]
 800320c:	1c59      	adds	r1, r3, #1
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	6211      	str	r1, [r2, #32]
 8003212:	781a      	ldrb	r2, [r3, #0]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800321e:	b29b      	uxth	r3, r3
 8003220:	3b01      	subs	r3, #1
 8003222:	b29b      	uxth	r3, r3
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4619      	mov	r1, r3
 8003228:	84d1      	strh	r1, [r2, #38]	; 0x26
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10f      	bne.n	800324e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	68da      	ldr	r2, [r3, #12]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800323c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68da      	ldr	r2, [r3, #12]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800324c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e000      	b.n	8003254 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003252:	2302      	movs	r3, #2
  }
}
 8003254:	4618      	mov	r0, r3
 8003256:	3714      	adds	r7, #20
 8003258:	46bd      	mov	sp, r7
 800325a:	bc80      	pop	{r7}
 800325c:	4770      	bx	lr

0800325e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800325e:	b580      	push	{r7, lr}
 8003260:	b082      	sub	sp, #8
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	68da      	ldr	r2, [r3, #12]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003274:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7ff feee 	bl	8003060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b086      	sub	sp, #24
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b22      	cmp	r3, #34	; 0x22
 80032a0:	f040 8099 	bne.w	80033d6 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ac:	d117      	bne.n	80032de <UART_Receive_IT+0x50>
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d113      	bne.n	80032de <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80032b6:	2300      	movs	r3, #0
 80032b8:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032be:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032d6:	1c9a      	adds	r2, r3, #2
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	629a      	str	r2, [r3, #40]	; 0x28
 80032dc:	e026      	b.n	800332c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	689b      	ldr	r3, [r3, #8]
 80032ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032f0:	d007      	beq.n	8003302 <UART_Receive_IT+0x74>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10a      	bne.n	8003310 <UART_Receive_IT+0x82>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	b2da      	uxtb	r2, r3
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	701a      	strb	r2, [r3, #0]
 800330e:	e008      	b.n	8003322 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800331c:	b2da      	uxtb	r2, r3
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003326:	1c5a      	adds	r2, r3, #1
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29b      	uxth	r3, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4619      	mov	r1, r3
 800333a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800333c:	2b00      	cmp	r3, #0
 800333e:	d148      	bne.n	80033d2 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0220 	bic.w	r2, r2, #32
 800334e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800335e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695a      	ldr	r2, [r3, #20]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f022 0201 	bic.w	r2, r2, #1
 800336e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2220      	movs	r2, #32
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337c:	2b01      	cmp	r3, #1
 800337e:	d123      	bne.n	80033c8 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f022 0210 	bic.w	r2, r2, #16
 8003394:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f003 0310 	and.w	r3, r3, #16
 80033a0:	2b10      	cmp	r3, #16
 80033a2:	d10a      	bne.n	80033ba <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80033be:	4619      	mov	r1, r3
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f7ff fe68 	bl	8003096 <HAL_UARTEx_RxEventCallback>
 80033c6:	e002      	b.n	80033ce <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80033c8:	6878      	ldr	r0, [r7, #4]
 80033ca:	f7ff fe52 	bl	8003072 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80033ce:	2300      	movs	r3, #0
 80033d0:	e002      	b.n	80033d8 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80033d2:	2300      	movs	r3, #0
 80033d4:	e000      	b.n	80033d8 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80033d6:	2302      	movs	r3, #2
  }
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68da      	ldr	r2, [r3, #12]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	430a      	orrs	r2, r1
 80033fc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	691b      	ldr	r3, [r3, #16]
 8003406:	431a      	orrs	r2, r3
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	695b      	ldr	r3, [r3, #20]
 800340c:	4313      	orrs	r3, r2
 800340e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	68db      	ldr	r3, [r3, #12]
 8003416:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800341a:	f023 030c 	bic.w	r3, r3, #12
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	6812      	ldr	r2, [r2, #0]
 8003422:	68b9      	ldr	r1, [r7, #8]
 8003424:	430b      	orrs	r3, r1
 8003426:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699a      	ldr	r2, [r3, #24]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a2c      	ldr	r2, [pc, #176]	; (80034f4 <UART_SetConfig+0x114>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d103      	bne.n	8003450 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003448:	f7fe ff6a 	bl	8002320 <HAL_RCC_GetPCLK2Freq>
 800344c:	60f8      	str	r0, [r7, #12]
 800344e:	e002      	b.n	8003456 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003450:	f7fe ff52 	bl	80022f8 <HAL_RCC_GetPCLK1Freq>
 8003454:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	4613      	mov	r3, r2
 800345a:	009b      	lsls	r3, r3, #2
 800345c:	4413      	add	r3, r2
 800345e:	009a      	lsls	r2, r3, #2
 8003460:	441a      	add	r2, r3
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	4a22      	ldr	r2, [pc, #136]	; (80034f8 <UART_SetConfig+0x118>)
 800346e:	fba2 2303 	umull	r2, r3, r2, r3
 8003472:	095b      	lsrs	r3, r3, #5
 8003474:	0119      	lsls	r1, r3, #4
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4613      	mov	r3, r2
 800347a:	009b      	lsls	r3, r3, #2
 800347c:	4413      	add	r3, r2
 800347e:	009a      	lsls	r2, r3, #2
 8003480:	441a      	add	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	fbb2 f2f3 	udiv	r2, r2, r3
 800348c:	4b1a      	ldr	r3, [pc, #104]	; (80034f8 <UART_SetConfig+0x118>)
 800348e:	fba3 0302 	umull	r0, r3, r3, r2
 8003492:	095b      	lsrs	r3, r3, #5
 8003494:	2064      	movs	r0, #100	; 0x64
 8003496:	fb00 f303 	mul.w	r3, r0, r3
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	011b      	lsls	r3, r3, #4
 800349e:	3332      	adds	r3, #50	; 0x32
 80034a0:	4a15      	ldr	r2, [pc, #84]	; (80034f8 <UART_SetConfig+0x118>)
 80034a2:	fba2 2303 	umull	r2, r3, r2, r3
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80034ac:	4419      	add	r1, r3
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	009a      	lsls	r2, r3, #2
 80034b8:	441a      	add	r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	fbb2 f2f3 	udiv	r2, r2, r3
 80034c4:	4b0c      	ldr	r3, [pc, #48]	; (80034f8 <UART_SetConfig+0x118>)
 80034c6:	fba3 0302 	umull	r0, r3, r3, r2
 80034ca:	095b      	lsrs	r3, r3, #5
 80034cc:	2064      	movs	r0, #100	; 0x64
 80034ce:	fb00 f303 	mul.w	r3, r0, r3
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	011b      	lsls	r3, r3, #4
 80034d6:	3332      	adds	r3, #50	; 0x32
 80034d8:	4a07      	ldr	r2, [pc, #28]	; (80034f8 <UART_SetConfig+0x118>)
 80034da:	fba2 2303 	umull	r2, r3, r2, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	f003 020f 	and.w	r2, r3, #15
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	440a      	add	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80034ec:	bf00      	nop
 80034ee:	3710      	adds	r7, #16
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bd80      	pop	{r7, pc}
 80034f4:	40013800 	.word	0x40013800
 80034f8:	51eb851f 	.word	0x51eb851f

080034fc <__errno>:
 80034fc:	4b01      	ldr	r3, [pc, #4]	; (8003504 <__errno+0x8>)
 80034fe:	6818      	ldr	r0, [r3, #0]
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	20000074 	.word	0x20000074

08003508 <__libc_init_array>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	2600      	movs	r6, #0
 800350c:	4d0c      	ldr	r5, [pc, #48]	; (8003540 <__libc_init_array+0x38>)
 800350e:	4c0d      	ldr	r4, [pc, #52]	; (8003544 <__libc_init_array+0x3c>)
 8003510:	1b64      	subs	r4, r4, r5
 8003512:	10a4      	asrs	r4, r4, #2
 8003514:	42a6      	cmp	r6, r4
 8003516:	d109      	bne.n	800352c <__libc_init_array+0x24>
 8003518:	f000 fc9c 	bl	8003e54 <_init>
 800351c:	2600      	movs	r6, #0
 800351e:	4d0a      	ldr	r5, [pc, #40]	; (8003548 <__libc_init_array+0x40>)
 8003520:	4c0a      	ldr	r4, [pc, #40]	; (800354c <__libc_init_array+0x44>)
 8003522:	1b64      	subs	r4, r4, r5
 8003524:	10a4      	asrs	r4, r4, #2
 8003526:	42a6      	cmp	r6, r4
 8003528:	d105      	bne.n	8003536 <__libc_init_array+0x2e>
 800352a:	bd70      	pop	{r4, r5, r6, pc}
 800352c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003530:	4798      	blx	r3
 8003532:	3601      	adds	r6, #1
 8003534:	e7ee      	b.n	8003514 <__libc_init_array+0xc>
 8003536:	f855 3b04 	ldr.w	r3, [r5], #4
 800353a:	4798      	blx	r3
 800353c:	3601      	adds	r6, #1
 800353e:	e7f2      	b.n	8003526 <__libc_init_array+0x1e>
 8003540:	08003f28 	.word	0x08003f28
 8003544:	08003f28 	.word	0x08003f28
 8003548:	08003f28 	.word	0x08003f28
 800354c:	08003f2c 	.word	0x08003f2c

08003550 <memset>:
 8003550:	4603      	mov	r3, r0
 8003552:	4402      	add	r2, r0
 8003554:	4293      	cmp	r3, r2
 8003556:	d100      	bne.n	800355a <memset+0xa>
 8003558:	4770      	bx	lr
 800355a:	f803 1b01 	strb.w	r1, [r3], #1
 800355e:	e7f9      	b.n	8003554 <memset+0x4>

08003560 <siprintf>:
 8003560:	b40e      	push	{r1, r2, r3}
 8003562:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003566:	b500      	push	{lr}
 8003568:	b09c      	sub	sp, #112	; 0x70
 800356a:	ab1d      	add	r3, sp, #116	; 0x74
 800356c:	9002      	str	r0, [sp, #8]
 800356e:	9006      	str	r0, [sp, #24]
 8003570:	9107      	str	r1, [sp, #28]
 8003572:	9104      	str	r1, [sp, #16]
 8003574:	4808      	ldr	r0, [pc, #32]	; (8003598 <siprintf+0x38>)
 8003576:	4909      	ldr	r1, [pc, #36]	; (800359c <siprintf+0x3c>)
 8003578:	f853 2b04 	ldr.w	r2, [r3], #4
 800357c:	9105      	str	r1, [sp, #20]
 800357e:	6800      	ldr	r0, [r0, #0]
 8003580:	a902      	add	r1, sp, #8
 8003582:	9301      	str	r3, [sp, #4]
 8003584:	f000 f868 	bl	8003658 <_svfiprintf_r>
 8003588:	2200      	movs	r2, #0
 800358a:	9b02      	ldr	r3, [sp, #8]
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	b01c      	add	sp, #112	; 0x70
 8003590:	f85d eb04 	ldr.w	lr, [sp], #4
 8003594:	b003      	add	sp, #12
 8003596:	4770      	bx	lr
 8003598:	20000074 	.word	0x20000074
 800359c:	ffff0208 	.word	0xffff0208

080035a0 <__ssputs_r>:
 80035a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035a4:	688e      	ldr	r6, [r1, #8]
 80035a6:	4682      	mov	sl, r0
 80035a8:	429e      	cmp	r6, r3
 80035aa:	460c      	mov	r4, r1
 80035ac:	4690      	mov	r8, r2
 80035ae:	461f      	mov	r7, r3
 80035b0:	d838      	bhi.n	8003624 <__ssputs_r+0x84>
 80035b2:	898a      	ldrh	r2, [r1, #12]
 80035b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80035b8:	d032      	beq.n	8003620 <__ssputs_r+0x80>
 80035ba:	6825      	ldr	r5, [r4, #0]
 80035bc:	6909      	ldr	r1, [r1, #16]
 80035be:	3301      	adds	r3, #1
 80035c0:	eba5 0901 	sub.w	r9, r5, r1
 80035c4:	6965      	ldr	r5, [r4, #20]
 80035c6:	444b      	add	r3, r9
 80035c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80035cc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80035d0:	106d      	asrs	r5, r5, #1
 80035d2:	429d      	cmp	r5, r3
 80035d4:	bf38      	it	cc
 80035d6:	461d      	movcc	r5, r3
 80035d8:	0553      	lsls	r3, r2, #21
 80035da:	d531      	bpl.n	8003640 <__ssputs_r+0xa0>
 80035dc:	4629      	mov	r1, r5
 80035de:	f000 fb6f 	bl	8003cc0 <_malloc_r>
 80035e2:	4606      	mov	r6, r0
 80035e4:	b950      	cbnz	r0, 80035fc <__ssputs_r+0x5c>
 80035e6:	230c      	movs	r3, #12
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	f8ca 3000 	str.w	r3, [sl]
 80035f0:	89a3      	ldrh	r3, [r4, #12]
 80035f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f6:	81a3      	strh	r3, [r4, #12]
 80035f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035fc:	464a      	mov	r2, r9
 80035fe:	6921      	ldr	r1, [r4, #16]
 8003600:	f000 face 	bl	8003ba0 <memcpy>
 8003604:	89a3      	ldrh	r3, [r4, #12]
 8003606:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800360a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800360e:	81a3      	strh	r3, [r4, #12]
 8003610:	6126      	str	r6, [r4, #16]
 8003612:	444e      	add	r6, r9
 8003614:	6026      	str	r6, [r4, #0]
 8003616:	463e      	mov	r6, r7
 8003618:	6165      	str	r5, [r4, #20]
 800361a:	eba5 0509 	sub.w	r5, r5, r9
 800361e:	60a5      	str	r5, [r4, #8]
 8003620:	42be      	cmp	r6, r7
 8003622:	d900      	bls.n	8003626 <__ssputs_r+0x86>
 8003624:	463e      	mov	r6, r7
 8003626:	4632      	mov	r2, r6
 8003628:	4641      	mov	r1, r8
 800362a:	6820      	ldr	r0, [r4, #0]
 800362c:	f000 fac6 	bl	8003bbc <memmove>
 8003630:	68a3      	ldr	r3, [r4, #8]
 8003632:	2000      	movs	r0, #0
 8003634:	1b9b      	subs	r3, r3, r6
 8003636:	60a3      	str	r3, [r4, #8]
 8003638:	6823      	ldr	r3, [r4, #0]
 800363a:	4433      	add	r3, r6
 800363c:	6023      	str	r3, [r4, #0]
 800363e:	e7db      	b.n	80035f8 <__ssputs_r+0x58>
 8003640:	462a      	mov	r2, r5
 8003642:	f000 fbb1 	bl	8003da8 <_realloc_r>
 8003646:	4606      	mov	r6, r0
 8003648:	2800      	cmp	r0, #0
 800364a:	d1e1      	bne.n	8003610 <__ssputs_r+0x70>
 800364c:	4650      	mov	r0, sl
 800364e:	6921      	ldr	r1, [r4, #16]
 8003650:	f000 face 	bl	8003bf0 <_free_r>
 8003654:	e7c7      	b.n	80035e6 <__ssputs_r+0x46>
	...

08003658 <_svfiprintf_r>:
 8003658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800365c:	4698      	mov	r8, r3
 800365e:	898b      	ldrh	r3, [r1, #12]
 8003660:	4607      	mov	r7, r0
 8003662:	061b      	lsls	r3, r3, #24
 8003664:	460d      	mov	r5, r1
 8003666:	4614      	mov	r4, r2
 8003668:	b09d      	sub	sp, #116	; 0x74
 800366a:	d50e      	bpl.n	800368a <_svfiprintf_r+0x32>
 800366c:	690b      	ldr	r3, [r1, #16]
 800366e:	b963      	cbnz	r3, 800368a <_svfiprintf_r+0x32>
 8003670:	2140      	movs	r1, #64	; 0x40
 8003672:	f000 fb25 	bl	8003cc0 <_malloc_r>
 8003676:	6028      	str	r0, [r5, #0]
 8003678:	6128      	str	r0, [r5, #16]
 800367a:	b920      	cbnz	r0, 8003686 <_svfiprintf_r+0x2e>
 800367c:	230c      	movs	r3, #12
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	f04f 30ff 	mov.w	r0, #4294967295
 8003684:	e0d1      	b.n	800382a <_svfiprintf_r+0x1d2>
 8003686:	2340      	movs	r3, #64	; 0x40
 8003688:	616b      	str	r3, [r5, #20]
 800368a:	2300      	movs	r3, #0
 800368c:	9309      	str	r3, [sp, #36]	; 0x24
 800368e:	2320      	movs	r3, #32
 8003690:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003694:	2330      	movs	r3, #48	; 0x30
 8003696:	f04f 0901 	mov.w	r9, #1
 800369a:	f8cd 800c 	str.w	r8, [sp, #12]
 800369e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8003844 <_svfiprintf_r+0x1ec>
 80036a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036a6:	4623      	mov	r3, r4
 80036a8:	469a      	mov	sl, r3
 80036aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80036ae:	b10a      	cbz	r2, 80036b4 <_svfiprintf_r+0x5c>
 80036b0:	2a25      	cmp	r2, #37	; 0x25
 80036b2:	d1f9      	bne.n	80036a8 <_svfiprintf_r+0x50>
 80036b4:	ebba 0b04 	subs.w	fp, sl, r4
 80036b8:	d00b      	beq.n	80036d2 <_svfiprintf_r+0x7a>
 80036ba:	465b      	mov	r3, fp
 80036bc:	4622      	mov	r2, r4
 80036be:	4629      	mov	r1, r5
 80036c0:	4638      	mov	r0, r7
 80036c2:	f7ff ff6d 	bl	80035a0 <__ssputs_r>
 80036c6:	3001      	adds	r0, #1
 80036c8:	f000 80aa 	beq.w	8003820 <_svfiprintf_r+0x1c8>
 80036cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80036ce:	445a      	add	r2, fp
 80036d0:	9209      	str	r2, [sp, #36]	; 0x24
 80036d2:	f89a 3000 	ldrb.w	r3, [sl]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f000 80a2 	beq.w	8003820 <_svfiprintf_r+0x1c8>
 80036dc:	2300      	movs	r3, #0
 80036de:	f04f 32ff 	mov.w	r2, #4294967295
 80036e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036e6:	f10a 0a01 	add.w	sl, sl, #1
 80036ea:	9304      	str	r3, [sp, #16]
 80036ec:	9307      	str	r3, [sp, #28]
 80036ee:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036f2:	931a      	str	r3, [sp, #104]	; 0x68
 80036f4:	4654      	mov	r4, sl
 80036f6:	2205      	movs	r2, #5
 80036f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80036fc:	4851      	ldr	r0, [pc, #324]	; (8003844 <_svfiprintf_r+0x1ec>)
 80036fe:	f000 fa41 	bl	8003b84 <memchr>
 8003702:	9a04      	ldr	r2, [sp, #16]
 8003704:	b9d8      	cbnz	r0, 800373e <_svfiprintf_r+0xe6>
 8003706:	06d0      	lsls	r0, r2, #27
 8003708:	bf44      	itt	mi
 800370a:	2320      	movmi	r3, #32
 800370c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003710:	0711      	lsls	r1, r2, #28
 8003712:	bf44      	itt	mi
 8003714:	232b      	movmi	r3, #43	; 0x2b
 8003716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800371a:	f89a 3000 	ldrb.w	r3, [sl]
 800371e:	2b2a      	cmp	r3, #42	; 0x2a
 8003720:	d015      	beq.n	800374e <_svfiprintf_r+0xf6>
 8003722:	4654      	mov	r4, sl
 8003724:	2000      	movs	r0, #0
 8003726:	f04f 0c0a 	mov.w	ip, #10
 800372a:	9a07      	ldr	r2, [sp, #28]
 800372c:	4621      	mov	r1, r4
 800372e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003732:	3b30      	subs	r3, #48	; 0x30
 8003734:	2b09      	cmp	r3, #9
 8003736:	d94e      	bls.n	80037d6 <_svfiprintf_r+0x17e>
 8003738:	b1b0      	cbz	r0, 8003768 <_svfiprintf_r+0x110>
 800373a:	9207      	str	r2, [sp, #28]
 800373c:	e014      	b.n	8003768 <_svfiprintf_r+0x110>
 800373e:	eba0 0308 	sub.w	r3, r0, r8
 8003742:	fa09 f303 	lsl.w	r3, r9, r3
 8003746:	4313      	orrs	r3, r2
 8003748:	46a2      	mov	sl, r4
 800374a:	9304      	str	r3, [sp, #16]
 800374c:	e7d2      	b.n	80036f4 <_svfiprintf_r+0x9c>
 800374e:	9b03      	ldr	r3, [sp, #12]
 8003750:	1d19      	adds	r1, r3, #4
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	9103      	str	r1, [sp, #12]
 8003756:	2b00      	cmp	r3, #0
 8003758:	bfbb      	ittet	lt
 800375a:	425b      	neglt	r3, r3
 800375c:	f042 0202 	orrlt.w	r2, r2, #2
 8003760:	9307      	strge	r3, [sp, #28]
 8003762:	9307      	strlt	r3, [sp, #28]
 8003764:	bfb8      	it	lt
 8003766:	9204      	strlt	r2, [sp, #16]
 8003768:	7823      	ldrb	r3, [r4, #0]
 800376a:	2b2e      	cmp	r3, #46	; 0x2e
 800376c:	d10c      	bne.n	8003788 <_svfiprintf_r+0x130>
 800376e:	7863      	ldrb	r3, [r4, #1]
 8003770:	2b2a      	cmp	r3, #42	; 0x2a
 8003772:	d135      	bne.n	80037e0 <_svfiprintf_r+0x188>
 8003774:	9b03      	ldr	r3, [sp, #12]
 8003776:	3402      	adds	r4, #2
 8003778:	1d1a      	adds	r2, r3, #4
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	9203      	str	r2, [sp, #12]
 800377e:	2b00      	cmp	r3, #0
 8003780:	bfb8      	it	lt
 8003782:	f04f 33ff 	movlt.w	r3, #4294967295
 8003786:	9305      	str	r3, [sp, #20]
 8003788:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8003848 <_svfiprintf_r+0x1f0>
 800378c:	2203      	movs	r2, #3
 800378e:	4650      	mov	r0, sl
 8003790:	7821      	ldrb	r1, [r4, #0]
 8003792:	f000 f9f7 	bl	8003b84 <memchr>
 8003796:	b140      	cbz	r0, 80037aa <_svfiprintf_r+0x152>
 8003798:	2340      	movs	r3, #64	; 0x40
 800379a:	eba0 000a 	sub.w	r0, r0, sl
 800379e:	fa03 f000 	lsl.w	r0, r3, r0
 80037a2:	9b04      	ldr	r3, [sp, #16]
 80037a4:	3401      	adds	r4, #1
 80037a6:	4303      	orrs	r3, r0
 80037a8:	9304      	str	r3, [sp, #16]
 80037aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80037ae:	2206      	movs	r2, #6
 80037b0:	4826      	ldr	r0, [pc, #152]	; (800384c <_svfiprintf_r+0x1f4>)
 80037b2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037b6:	f000 f9e5 	bl	8003b84 <memchr>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d038      	beq.n	8003830 <_svfiprintf_r+0x1d8>
 80037be:	4b24      	ldr	r3, [pc, #144]	; (8003850 <_svfiprintf_r+0x1f8>)
 80037c0:	bb1b      	cbnz	r3, 800380a <_svfiprintf_r+0x1b2>
 80037c2:	9b03      	ldr	r3, [sp, #12]
 80037c4:	3307      	adds	r3, #7
 80037c6:	f023 0307 	bic.w	r3, r3, #7
 80037ca:	3308      	adds	r3, #8
 80037cc:	9303      	str	r3, [sp, #12]
 80037ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037d0:	4433      	add	r3, r6
 80037d2:	9309      	str	r3, [sp, #36]	; 0x24
 80037d4:	e767      	b.n	80036a6 <_svfiprintf_r+0x4e>
 80037d6:	460c      	mov	r4, r1
 80037d8:	2001      	movs	r0, #1
 80037da:	fb0c 3202 	mla	r2, ip, r2, r3
 80037de:	e7a5      	b.n	800372c <_svfiprintf_r+0xd4>
 80037e0:	2300      	movs	r3, #0
 80037e2:	f04f 0c0a 	mov.w	ip, #10
 80037e6:	4619      	mov	r1, r3
 80037e8:	3401      	adds	r4, #1
 80037ea:	9305      	str	r3, [sp, #20]
 80037ec:	4620      	mov	r0, r4
 80037ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80037f2:	3a30      	subs	r2, #48	; 0x30
 80037f4:	2a09      	cmp	r2, #9
 80037f6:	d903      	bls.n	8003800 <_svfiprintf_r+0x1a8>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0c5      	beq.n	8003788 <_svfiprintf_r+0x130>
 80037fc:	9105      	str	r1, [sp, #20]
 80037fe:	e7c3      	b.n	8003788 <_svfiprintf_r+0x130>
 8003800:	4604      	mov	r4, r0
 8003802:	2301      	movs	r3, #1
 8003804:	fb0c 2101 	mla	r1, ip, r1, r2
 8003808:	e7f0      	b.n	80037ec <_svfiprintf_r+0x194>
 800380a:	ab03      	add	r3, sp, #12
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	462a      	mov	r2, r5
 8003810:	4638      	mov	r0, r7
 8003812:	4b10      	ldr	r3, [pc, #64]	; (8003854 <_svfiprintf_r+0x1fc>)
 8003814:	a904      	add	r1, sp, #16
 8003816:	f3af 8000 	nop.w
 800381a:	1c42      	adds	r2, r0, #1
 800381c:	4606      	mov	r6, r0
 800381e:	d1d6      	bne.n	80037ce <_svfiprintf_r+0x176>
 8003820:	89ab      	ldrh	r3, [r5, #12]
 8003822:	065b      	lsls	r3, r3, #25
 8003824:	f53f af2c 	bmi.w	8003680 <_svfiprintf_r+0x28>
 8003828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800382a:	b01d      	add	sp, #116	; 0x74
 800382c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003830:	ab03      	add	r3, sp, #12
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	462a      	mov	r2, r5
 8003836:	4638      	mov	r0, r7
 8003838:	4b06      	ldr	r3, [pc, #24]	; (8003854 <_svfiprintf_r+0x1fc>)
 800383a:	a904      	add	r1, sp, #16
 800383c:	f000 f87c 	bl	8003938 <_printf_i>
 8003840:	e7eb      	b.n	800381a <_svfiprintf_r+0x1c2>
 8003842:	bf00      	nop
 8003844:	08003ef4 	.word	0x08003ef4
 8003848:	08003efa 	.word	0x08003efa
 800384c:	08003efe 	.word	0x08003efe
 8003850:	00000000 	.word	0x00000000
 8003854:	080035a1 	.word	0x080035a1

08003858 <_printf_common>:
 8003858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800385c:	4616      	mov	r6, r2
 800385e:	4699      	mov	r9, r3
 8003860:	688a      	ldr	r2, [r1, #8]
 8003862:	690b      	ldr	r3, [r1, #16]
 8003864:	4607      	mov	r7, r0
 8003866:	4293      	cmp	r3, r2
 8003868:	bfb8      	it	lt
 800386a:	4613      	movlt	r3, r2
 800386c:	6033      	str	r3, [r6, #0]
 800386e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003872:	460c      	mov	r4, r1
 8003874:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003878:	b10a      	cbz	r2, 800387e <_printf_common+0x26>
 800387a:	3301      	adds	r3, #1
 800387c:	6033      	str	r3, [r6, #0]
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	0699      	lsls	r1, r3, #26
 8003882:	bf42      	ittt	mi
 8003884:	6833      	ldrmi	r3, [r6, #0]
 8003886:	3302      	addmi	r3, #2
 8003888:	6033      	strmi	r3, [r6, #0]
 800388a:	6825      	ldr	r5, [r4, #0]
 800388c:	f015 0506 	ands.w	r5, r5, #6
 8003890:	d106      	bne.n	80038a0 <_printf_common+0x48>
 8003892:	f104 0a19 	add.w	sl, r4, #25
 8003896:	68e3      	ldr	r3, [r4, #12]
 8003898:	6832      	ldr	r2, [r6, #0]
 800389a:	1a9b      	subs	r3, r3, r2
 800389c:	42ab      	cmp	r3, r5
 800389e:	dc28      	bgt.n	80038f2 <_printf_common+0x9a>
 80038a0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80038a4:	1e13      	subs	r3, r2, #0
 80038a6:	6822      	ldr	r2, [r4, #0]
 80038a8:	bf18      	it	ne
 80038aa:	2301      	movne	r3, #1
 80038ac:	0692      	lsls	r2, r2, #26
 80038ae:	d42d      	bmi.n	800390c <_printf_common+0xb4>
 80038b0:	4649      	mov	r1, r9
 80038b2:	4638      	mov	r0, r7
 80038b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80038b8:	47c0      	blx	r8
 80038ba:	3001      	adds	r0, #1
 80038bc:	d020      	beq.n	8003900 <_printf_common+0xa8>
 80038be:	6823      	ldr	r3, [r4, #0]
 80038c0:	68e5      	ldr	r5, [r4, #12]
 80038c2:	f003 0306 	and.w	r3, r3, #6
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	bf18      	it	ne
 80038ca:	2500      	movne	r5, #0
 80038cc:	6832      	ldr	r2, [r6, #0]
 80038ce:	f04f 0600 	mov.w	r6, #0
 80038d2:	68a3      	ldr	r3, [r4, #8]
 80038d4:	bf08      	it	eq
 80038d6:	1aad      	subeq	r5, r5, r2
 80038d8:	6922      	ldr	r2, [r4, #16]
 80038da:	bf08      	it	eq
 80038dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80038e0:	4293      	cmp	r3, r2
 80038e2:	bfc4      	itt	gt
 80038e4:	1a9b      	subgt	r3, r3, r2
 80038e6:	18ed      	addgt	r5, r5, r3
 80038e8:	341a      	adds	r4, #26
 80038ea:	42b5      	cmp	r5, r6
 80038ec:	d11a      	bne.n	8003924 <_printf_common+0xcc>
 80038ee:	2000      	movs	r0, #0
 80038f0:	e008      	b.n	8003904 <_printf_common+0xac>
 80038f2:	2301      	movs	r3, #1
 80038f4:	4652      	mov	r2, sl
 80038f6:	4649      	mov	r1, r9
 80038f8:	4638      	mov	r0, r7
 80038fa:	47c0      	blx	r8
 80038fc:	3001      	adds	r0, #1
 80038fe:	d103      	bne.n	8003908 <_printf_common+0xb0>
 8003900:	f04f 30ff 	mov.w	r0, #4294967295
 8003904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003908:	3501      	adds	r5, #1
 800390a:	e7c4      	b.n	8003896 <_printf_common+0x3e>
 800390c:	2030      	movs	r0, #48	; 0x30
 800390e:	18e1      	adds	r1, r4, r3
 8003910:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800391a:	4422      	add	r2, r4
 800391c:	3302      	adds	r3, #2
 800391e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003922:	e7c5      	b.n	80038b0 <_printf_common+0x58>
 8003924:	2301      	movs	r3, #1
 8003926:	4622      	mov	r2, r4
 8003928:	4649      	mov	r1, r9
 800392a:	4638      	mov	r0, r7
 800392c:	47c0      	blx	r8
 800392e:	3001      	adds	r0, #1
 8003930:	d0e6      	beq.n	8003900 <_printf_common+0xa8>
 8003932:	3601      	adds	r6, #1
 8003934:	e7d9      	b.n	80038ea <_printf_common+0x92>
	...

08003938 <_printf_i>:
 8003938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800393c:	7e0f      	ldrb	r7, [r1, #24]
 800393e:	4691      	mov	r9, r2
 8003940:	2f78      	cmp	r7, #120	; 0x78
 8003942:	4680      	mov	r8, r0
 8003944:	460c      	mov	r4, r1
 8003946:	469a      	mov	sl, r3
 8003948:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800394a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800394e:	d807      	bhi.n	8003960 <_printf_i+0x28>
 8003950:	2f62      	cmp	r7, #98	; 0x62
 8003952:	d80a      	bhi.n	800396a <_printf_i+0x32>
 8003954:	2f00      	cmp	r7, #0
 8003956:	f000 80d9 	beq.w	8003b0c <_printf_i+0x1d4>
 800395a:	2f58      	cmp	r7, #88	; 0x58
 800395c:	f000 80a4 	beq.w	8003aa8 <_printf_i+0x170>
 8003960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003968:	e03a      	b.n	80039e0 <_printf_i+0xa8>
 800396a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800396e:	2b15      	cmp	r3, #21
 8003970:	d8f6      	bhi.n	8003960 <_printf_i+0x28>
 8003972:	a101      	add	r1, pc, #4	; (adr r1, 8003978 <_printf_i+0x40>)
 8003974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003978:	080039d1 	.word	0x080039d1
 800397c:	080039e5 	.word	0x080039e5
 8003980:	08003961 	.word	0x08003961
 8003984:	08003961 	.word	0x08003961
 8003988:	08003961 	.word	0x08003961
 800398c:	08003961 	.word	0x08003961
 8003990:	080039e5 	.word	0x080039e5
 8003994:	08003961 	.word	0x08003961
 8003998:	08003961 	.word	0x08003961
 800399c:	08003961 	.word	0x08003961
 80039a0:	08003961 	.word	0x08003961
 80039a4:	08003af3 	.word	0x08003af3
 80039a8:	08003a15 	.word	0x08003a15
 80039ac:	08003ad5 	.word	0x08003ad5
 80039b0:	08003961 	.word	0x08003961
 80039b4:	08003961 	.word	0x08003961
 80039b8:	08003b15 	.word	0x08003b15
 80039bc:	08003961 	.word	0x08003961
 80039c0:	08003a15 	.word	0x08003a15
 80039c4:	08003961 	.word	0x08003961
 80039c8:	08003961 	.word	0x08003961
 80039cc:	08003add 	.word	0x08003add
 80039d0:	682b      	ldr	r3, [r5, #0]
 80039d2:	1d1a      	adds	r2, r3, #4
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	602a      	str	r2, [r5, #0]
 80039d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80039e0:	2301      	movs	r3, #1
 80039e2:	e0a4      	b.n	8003b2e <_printf_i+0x1f6>
 80039e4:	6820      	ldr	r0, [r4, #0]
 80039e6:	6829      	ldr	r1, [r5, #0]
 80039e8:	0606      	lsls	r6, r0, #24
 80039ea:	f101 0304 	add.w	r3, r1, #4
 80039ee:	d50a      	bpl.n	8003a06 <_printf_i+0xce>
 80039f0:	680e      	ldr	r6, [r1, #0]
 80039f2:	602b      	str	r3, [r5, #0]
 80039f4:	2e00      	cmp	r6, #0
 80039f6:	da03      	bge.n	8003a00 <_printf_i+0xc8>
 80039f8:	232d      	movs	r3, #45	; 0x2d
 80039fa:	4276      	negs	r6, r6
 80039fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a00:	230a      	movs	r3, #10
 8003a02:	485e      	ldr	r0, [pc, #376]	; (8003b7c <_printf_i+0x244>)
 8003a04:	e019      	b.n	8003a3a <_printf_i+0x102>
 8003a06:	680e      	ldr	r6, [r1, #0]
 8003a08:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a0c:	602b      	str	r3, [r5, #0]
 8003a0e:	bf18      	it	ne
 8003a10:	b236      	sxthne	r6, r6
 8003a12:	e7ef      	b.n	80039f4 <_printf_i+0xbc>
 8003a14:	682b      	ldr	r3, [r5, #0]
 8003a16:	6820      	ldr	r0, [r4, #0]
 8003a18:	1d19      	adds	r1, r3, #4
 8003a1a:	6029      	str	r1, [r5, #0]
 8003a1c:	0601      	lsls	r1, r0, #24
 8003a1e:	d501      	bpl.n	8003a24 <_printf_i+0xec>
 8003a20:	681e      	ldr	r6, [r3, #0]
 8003a22:	e002      	b.n	8003a2a <_printf_i+0xf2>
 8003a24:	0646      	lsls	r6, r0, #25
 8003a26:	d5fb      	bpl.n	8003a20 <_printf_i+0xe8>
 8003a28:	881e      	ldrh	r6, [r3, #0]
 8003a2a:	2f6f      	cmp	r7, #111	; 0x6f
 8003a2c:	bf0c      	ite	eq
 8003a2e:	2308      	moveq	r3, #8
 8003a30:	230a      	movne	r3, #10
 8003a32:	4852      	ldr	r0, [pc, #328]	; (8003b7c <_printf_i+0x244>)
 8003a34:	2100      	movs	r1, #0
 8003a36:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a3a:	6865      	ldr	r5, [r4, #4]
 8003a3c:	2d00      	cmp	r5, #0
 8003a3e:	bfa8      	it	ge
 8003a40:	6821      	ldrge	r1, [r4, #0]
 8003a42:	60a5      	str	r5, [r4, #8]
 8003a44:	bfa4      	itt	ge
 8003a46:	f021 0104 	bicge.w	r1, r1, #4
 8003a4a:	6021      	strge	r1, [r4, #0]
 8003a4c:	b90e      	cbnz	r6, 8003a52 <_printf_i+0x11a>
 8003a4e:	2d00      	cmp	r5, #0
 8003a50:	d04d      	beq.n	8003aee <_printf_i+0x1b6>
 8003a52:	4615      	mov	r5, r2
 8003a54:	fbb6 f1f3 	udiv	r1, r6, r3
 8003a58:	fb03 6711 	mls	r7, r3, r1, r6
 8003a5c:	5dc7      	ldrb	r7, [r0, r7]
 8003a5e:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003a62:	4637      	mov	r7, r6
 8003a64:	42bb      	cmp	r3, r7
 8003a66:	460e      	mov	r6, r1
 8003a68:	d9f4      	bls.n	8003a54 <_printf_i+0x11c>
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	d10b      	bne.n	8003a86 <_printf_i+0x14e>
 8003a6e:	6823      	ldr	r3, [r4, #0]
 8003a70:	07de      	lsls	r6, r3, #31
 8003a72:	d508      	bpl.n	8003a86 <_printf_i+0x14e>
 8003a74:	6923      	ldr	r3, [r4, #16]
 8003a76:	6861      	ldr	r1, [r4, #4]
 8003a78:	4299      	cmp	r1, r3
 8003a7a:	bfde      	ittt	le
 8003a7c:	2330      	movle	r3, #48	; 0x30
 8003a7e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a82:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a86:	1b52      	subs	r2, r2, r5
 8003a88:	6122      	str	r2, [r4, #16]
 8003a8a:	464b      	mov	r3, r9
 8003a8c:	4621      	mov	r1, r4
 8003a8e:	4640      	mov	r0, r8
 8003a90:	f8cd a000 	str.w	sl, [sp]
 8003a94:	aa03      	add	r2, sp, #12
 8003a96:	f7ff fedf 	bl	8003858 <_printf_common>
 8003a9a:	3001      	adds	r0, #1
 8003a9c:	d14c      	bne.n	8003b38 <_printf_i+0x200>
 8003a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003aa2:	b004      	add	sp, #16
 8003aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003aa8:	4834      	ldr	r0, [pc, #208]	; (8003b7c <_printf_i+0x244>)
 8003aaa:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003aae:	6829      	ldr	r1, [r5, #0]
 8003ab0:	6823      	ldr	r3, [r4, #0]
 8003ab2:	f851 6b04 	ldr.w	r6, [r1], #4
 8003ab6:	6029      	str	r1, [r5, #0]
 8003ab8:	061d      	lsls	r5, r3, #24
 8003aba:	d514      	bpl.n	8003ae6 <_printf_i+0x1ae>
 8003abc:	07df      	lsls	r7, r3, #31
 8003abe:	bf44      	itt	mi
 8003ac0:	f043 0320 	orrmi.w	r3, r3, #32
 8003ac4:	6023      	strmi	r3, [r4, #0]
 8003ac6:	b91e      	cbnz	r6, 8003ad0 <_printf_i+0x198>
 8003ac8:	6823      	ldr	r3, [r4, #0]
 8003aca:	f023 0320 	bic.w	r3, r3, #32
 8003ace:	6023      	str	r3, [r4, #0]
 8003ad0:	2310      	movs	r3, #16
 8003ad2:	e7af      	b.n	8003a34 <_printf_i+0xfc>
 8003ad4:	6823      	ldr	r3, [r4, #0]
 8003ad6:	f043 0320 	orr.w	r3, r3, #32
 8003ada:	6023      	str	r3, [r4, #0]
 8003adc:	2378      	movs	r3, #120	; 0x78
 8003ade:	4828      	ldr	r0, [pc, #160]	; (8003b80 <_printf_i+0x248>)
 8003ae0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ae4:	e7e3      	b.n	8003aae <_printf_i+0x176>
 8003ae6:	0659      	lsls	r1, r3, #25
 8003ae8:	bf48      	it	mi
 8003aea:	b2b6      	uxthmi	r6, r6
 8003aec:	e7e6      	b.n	8003abc <_printf_i+0x184>
 8003aee:	4615      	mov	r5, r2
 8003af0:	e7bb      	b.n	8003a6a <_printf_i+0x132>
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	6826      	ldr	r6, [r4, #0]
 8003af6:	1d18      	adds	r0, r3, #4
 8003af8:	6961      	ldr	r1, [r4, #20]
 8003afa:	6028      	str	r0, [r5, #0]
 8003afc:	0635      	lsls	r5, r6, #24
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	d501      	bpl.n	8003b06 <_printf_i+0x1ce>
 8003b02:	6019      	str	r1, [r3, #0]
 8003b04:	e002      	b.n	8003b0c <_printf_i+0x1d4>
 8003b06:	0670      	lsls	r0, r6, #25
 8003b08:	d5fb      	bpl.n	8003b02 <_printf_i+0x1ca>
 8003b0a:	8019      	strh	r1, [r3, #0]
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	4615      	mov	r5, r2
 8003b10:	6123      	str	r3, [r4, #16]
 8003b12:	e7ba      	b.n	8003a8a <_printf_i+0x152>
 8003b14:	682b      	ldr	r3, [r5, #0]
 8003b16:	2100      	movs	r1, #0
 8003b18:	1d1a      	adds	r2, r3, #4
 8003b1a:	602a      	str	r2, [r5, #0]
 8003b1c:	681d      	ldr	r5, [r3, #0]
 8003b1e:	6862      	ldr	r2, [r4, #4]
 8003b20:	4628      	mov	r0, r5
 8003b22:	f000 f82f 	bl	8003b84 <memchr>
 8003b26:	b108      	cbz	r0, 8003b2c <_printf_i+0x1f4>
 8003b28:	1b40      	subs	r0, r0, r5
 8003b2a:	6060      	str	r0, [r4, #4]
 8003b2c:	6863      	ldr	r3, [r4, #4]
 8003b2e:	6123      	str	r3, [r4, #16]
 8003b30:	2300      	movs	r3, #0
 8003b32:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b36:	e7a8      	b.n	8003a8a <_printf_i+0x152>
 8003b38:	462a      	mov	r2, r5
 8003b3a:	4649      	mov	r1, r9
 8003b3c:	4640      	mov	r0, r8
 8003b3e:	6923      	ldr	r3, [r4, #16]
 8003b40:	47d0      	blx	sl
 8003b42:	3001      	adds	r0, #1
 8003b44:	d0ab      	beq.n	8003a9e <_printf_i+0x166>
 8003b46:	6823      	ldr	r3, [r4, #0]
 8003b48:	079b      	lsls	r3, r3, #30
 8003b4a:	d413      	bmi.n	8003b74 <_printf_i+0x23c>
 8003b4c:	68e0      	ldr	r0, [r4, #12]
 8003b4e:	9b03      	ldr	r3, [sp, #12]
 8003b50:	4298      	cmp	r0, r3
 8003b52:	bfb8      	it	lt
 8003b54:	4618      	movlt	r0, r3
 8003b56:	e7a4      	b.n	8003aa2 <_printf_i+0x16a>
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4632      	mov	r2, r6
 8003b5c:	4649      	mov	r1, r9
 8003b5e:	4640      	mov	r0, r8
 8003b60:	47d0      	blx	sl
 8003b62:	3001      	adds	r0, #1
 8003b64:	d09b      	beq.n	8003a9e <_printf_i+0x166>
 8003b66:	3501      	adds	r5, #1
 8003b68:	68e3      	ldr	r3, [r4, #12]
 8003b6a:	9903      	ldr	r1, [sp, #12]
 8003b6c:	1a5b      	subs	r3, r3, r1
 8003b6e:	42ab      	cmp	r3, r5
 8003b70:	dcf2      	bgt.n	8003b58 <_printf_i+0x220>
 8003b72:	e7eb      	b.n	8003b4c <_printf_i+0x214>
 8003b74:	2500      	movs	r5, #0
 8003b76:	f104 0619 	add.w	r6, r4, #25
 8003b7a:	e7f5      	b.n	8003b68 <_printf_i+0x230>
 8003b7c:	08003f05 	.word	0x08003f05
 8003b80:	08003f16 	.word	0x08003f16

08003b84 <memchr>:
 8003b84:	4603      	mov	r3, r0
 8003b86:	b510      	push	{r4, lr}
 8003b88:	b2c9      	uxtb	r1, r1
 8003b8a:	4402      	add	r2, r0
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	4618      	mov	r0, r3
 8003b90:	d101      	bne.n	8003b96 <memchr+0x12>
 8003b92:	2000      	movs	r0, #0
 8003b94:	e003      	b.n	8003b9e <memchr+0x1a>
 8003b96:	7804      	ldrb	r4, [r0, #0]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	428c      	cmp	r4, r1
 8003b9c:	d1f6      	bne.n	8003b8c <memchr+0x8>
 8003b9e:	bd10      	pop	{r4, pc}

08003ba0 <memcpy>:
 8003ba0:	440a      	add	r2, r1
 8003ba2:	4291      	cmp	r1, r2
 8003ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ba8:	d100      	bne.n	8003bac <memcpy+0xc>
 8003baa:	4770      	bx	lr
 8003bac:	b510      	push	{r4, lr}
 8003bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003bb2:	4291      	cmp	r1, r2
 8003bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003bb8:	d1f9      	bne.n	8003bae <memcpy+0xe>
 8003bba:	bd10      	pop	{r4, pc}

08003bbc <memmove>:
 8003bbc:	4288      	cmp	r0, r1
 8003bbe:	b510      	push	{r4, lr}
 8003bc0:	eb01 0402 	add.w	r4, r1, r2
 8003bc4:	d902      	bls.n	8003bcc <memmove+0x10>
 8003bc6:	4284      	cmp	r4, r0
 8003bc8:	4623      	mov	r3, r4
 8003bca:	d807      	bhi.n	8003bdc <memmove+0x20>
 8003bcc:	1e43      	subs	r3, r0, #1
 8003bce:	42a1      	cmp	r1, r4
 8003bd0:	d008      	beq.n	8003be4 <memmove+0x28>
 8003bd2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003bd6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8003bda:	e7f8      	b.n	8003bce <memmove+0x12>
 8003bdc:	4601      	mov	r1, r0
 8003bde:	4402      	add	r2, r0
 8003be0:	428a      	cmp	r2, r1
 8003be2:	d100      	bne.n	8003be6 <memmove+0x2a>
 8003be4:	bd10      	pop	{r4, pc}
 8003be6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003bea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8003bee:	e7f7      	b.n	8003be0 <memmove+0x24>

08003bf0 <_free_r>:
 8003bf0:	b538      	push	{r3, r4, r5, lr}
 8003bf2:	4605      	mov	r5, r0
 8003bf4:	2900      	cmp	r1, #0
 8003bf6:	d040      	beq.n	8003c7a <_free_r+0x8a>
 8003bf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003bfc:	1f0c      	subs	r4, r1, #4
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bfb8      	it	lt
 8003c02:	18e4      	addlt	r4, r4, r3
 8003c04:	f000 f910 	bl	8003e28 <__malloc_lock>
 8003c08:	4a1c      	ldr	r2, [pc, #112]	; (8003c7c <_free_r+0x8c>)
 8003c0a:	6813      	ldr	r3, [r2, #0]
 8003c0c:	b933      	cbnz	r3, 8003c1c <_free_r+0x2c>
 8003c0e:	6063      	str	r3, [r4, #4]
 8003c10:	6014      	str	r4, [r2, #0]
 8003c12:	4628      	mov	r0, r5
 8003c14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003c18:	f000 b90c 	b.w	8003e34 <__malloc_unlock>
 8003c1c:	42a3      	cmp	r3, r4
 8003c1e:	d908      	bls.n	8003c32 <_free_r+0x42>
 8003c20:	6820      	ldr	r0, [r4, #0]
 8003c22:	1821      	adds	r1, r4, r0
 8003c24:	428b      	cmp	r3, r1
 8003c26:	bf01      	itttt	eq
 8003c28:	6819      	ldreq	r1, [r3, #0]
 8003c2a:	685b      	ldreq	r3, [r3, #4]
 8003c2c:	1809      	addeq	r1, r1, r0
 8003c2e:	6021      	streq	r1, [r4, #0]
 8003c30:	e7ed      	b.n	8003c0e <_free_r+0x1e>
 8003c32:	461a      	mov	r2, r3
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	b10b      	cbz	r3, 8003c3c <_free_r+0x4c>
 8003c38:	42a3      	cmp	r3, r4
 8003c3a:	d9fa      	bls.n	8003c32 <_free_r+0x42>
 8003c3c:	6811      	ldr	r1, [r2, #0]
 8003c3e:	1850      	adds	r0, r2, r1
 8003c40:	42a0      	cmp	r0, r4
 8003c42:	d10b      	bne.n	8003c5c <_free_r+0x6c>
 8003c44:	6820      	ldr	r0, [r4, #0]
 8003c46:	4401      	add	r1, r0
 8003c48:	1850      	adds	r0, r2, r1
 8003c4a:	4283      	cmp	r3, r0
 8003c4c:	6011      	str	r1, [r2, #0]
 8003c4e:	d1e0      	bne.n	8003c12 <_free_r+0x22>
 8003c50:	6818      	ldr	r0, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	4401      	add	r1, r0
 8003c56:	6011      	str	r1, [r2, #0]
 8003c58:	6053      	str	r3, [r2, #4]
 8003c5a:	e7da      	b.n	8003c12 <_free_r+0x22>
 8003c5c:	d902      	bls.n	8003c64 <_free_r+0x74>
 8003c5e:	230c      	movs	r3, #12
 8003c60:	602b      	str	r3, [r5, #0]
 8003c62:	e7d6      	b.n	8003c12 <_free_r+0x22>
 8003c64:	6820      	ldr	r0, [r4, #0]
 8003c66:	1821      	adds	r1, r4, r0
 8003c68:	428b      	cmp	r3, r1
 8003c6a:	bf01      	itttt	eq
 8003c6c:	6819      	ldreq	r1, [r3, #0]
 8003c6e:	685b      	ldreq	r3, [r3, #4]
 8003c70:	1809      	addeq	r1, r1, r0
 8003c72:	6021      	streq	r1, [r4, #0]
 8003c74:	6063      	str	r3, [r4, #4]
 8003c76:	6054      	str	r4, [r2, #4]
 8003c78:	e7cb      	b.n	8003c12 <_free_r+0x22>
 8003c7a:	bd38      	pop	{r3, r4, r5, pc}
 8003c7c:	2000022c 	.word	0x2000022c

08003c80 <sbrk_aligned>:
 8003c80:	b570      	push	{r4, r5, r6, lr}
 8003c82:	4e0e      	ldr	r6, [pc, #56]	; (8003cbc <sbrk_aligned+0x3c>)
 8003c84:	460c      	mov	r4, r1
 8003c86:	6831      	ldr	r1, [r6, #0]
 8003c88:	4605      	mov	r5, r0
 8003c8a:	b911      	cbnz	r1, 8003c92 <sbrk_aligned+0x12>
 8003c8c:	f000 f8bc 	bl	8003e08 <_sbrk_r>
 8003c90:	6030      	str	r0, [r6, #0]
 8003c92:	4621      	mov	r1, r4
 8003c94:	4628      	mov	r0, r5
 8003c96:	f000 f8b7 	bl	8003e08 <_sbrk_r>
 8003c9a:	1c43      	adds	r3, r0, #1
 8003c9c:	d00a      	beq.n	8003cb4 <sbrk_aligned+0x34>
 8003c9e:	1cc4      	adds	r4, r0, #3
 8003ca0:	f024 0403 	bic.w	r4, r4, #3
 8003ca4:	42a0      	cmp	r0, r4
 8003ca6:	d007      	beq.n	8003cb8 <sbrk_aligned+0x38>
 8003ca8:	1a21      	subs	r1, r4, r0
 8003caa:	4628      	mov	r0, r5
 8003cac:	f000 f8ac 	bl	8003e08 <_sbrk_r>
 8003cb0:	3001      	adds	r0, #1
 8003cb2:	d101      	bne.n	8003cb8 <sbrk_aligned+0x38>
 8003cb4:	f04f 34ff 	mov.w	r4, #4294967295
 8003cb8:	4620      	mov	r0, r4
 8003cba:	bd70      	pop	{r4, r5, r6, pc}
 8003cbc:	20000230 	.word	0x20000230

08003cc0 <_malloc_r>:
 8003cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cc4:	1ccd      	adds	r5, r1, #3
 8003cc6:	f025 0503 	bic.w	r5, r5, #3
 8003cca:	3508      	adds	r5, #8
 8003ccc:	2d0c      	cmp	r5, #12
 8003cce:	bf38      	it	cc
 8003cd0:	250c      	movcc	r5, #12
 8003cd2:	2d00      	cmp	r5, #0
 8003cd4:	4607      	mov	r7, r0
 8003cd6:	db01      	blt.n	8003cdc <_malloc_r+0x1c>
 8003cd8:	42a9      	cmp	r1, r5
 8003cda:	d905      	bls.n	8003ce8 <_malloc_r+0x28>
 8003cdc:	230c      	movs	r3, #12
 8003cde:	2600      	movs	r6, #0
 8003ce0:	603b      	str	r3, [r7, #0]
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003ce8:	4e2e      	ldr	r6, [pc, #184]	; (8003da4 <_malloc_r+0xe4>)
 8003cea:	f000 f89d 	bl	8003e28 <__malloc_lock>
 8003cee:	6833      	ldr	r3, [r6, #0]
 8003cf0:	461c      	mov	r4, r3
 8003cf2:	bb34      	cbnz	r4, 8003d42 <_malloc_r+0x82>
 8003cf4:	4629      	mov	r1, r5
 8003cf6:	4638      	mov	r0, r7
 8003cf8:	f7ff ffc2 	bl	8003c80 <sbrk_aligned>
 8003cfc:	1c43      	adds	r3, r0, #1
 8003cfe:	4604      	mov	r4, r0
 8003d00:	d14d      	bne.n	8003d9e <_malloc_r+0xde>
 8003d02:	6834      	ldr	r4, [r6, #0]
 8003d04:	4626      	mov	r6, r4
 8003d06:	2e00      	cmp	r6, #0
 8003d08:	d140      	bne.n	8003d8c <_malloc_r+0xcc>
 8003d0a:	6823      	ldr	r3, [r4, #0]
 8003d0c:	4631      	mov	r1, r6
 8003d0e:	4638      	mov	r0, r7
 8003d10:	eb04 0803 	add.w	r8, r4, r3
 8003d14:	f000 f878 	bl	8003e08 <_sbrk_r>
 8003d18:	4580      	cmp	r8, r0
 8003d1a:	d13a      	bne.n	8003d92 <_malloc_r+0xd2>
 8003d1c:	6821      	ldr	r1, [r4, #0]
 8003d1e:	3503      	adds	r5, #3
 8003d20:	1a6d      	subs	r5, r5, r1
 8003d22:	f025 0503 	bic.w	r5, r5, #3
 8003d26:	3508      	adds	r5, #8
 8003d28:	2d0c      	cmp	r5, #12
 8003d2a:	bf38      	it	cc
 8003d2c:	250c      	movcc	r5, #12
 8003d2e:	4638      	mov	r0, r7
 8003d30:	4629      	mov	r1, r5
 8003d32:	f7ff ffa5 	bl	8003c80 <sbrk_aligned>
 8003d36:	3001      	adds	r0, #1
 8003d38:	d02b      	beq.n	8003d92 <_malloc_r+0xd2>
 8003d3a:	6823      	ldr	r3, [r4, #0]
 8003d3c:	442b      	add	r3, r5
 8003d3e:	6023      	str	r3, [r4, #0]
 8003d40:	e00e      	b.n	8003d60 <_malloc_r+0xa0>
 8003d42:	6822      	ldr	r2, [r4, #0]
 8003d44:	1b52      	subs	r2, r2, r5
 8003d46:	d41e      	bmi.n	8003d86 <_malloc_r+0xc6>
 8003d48:	2a0b      	cmp	r2, #11
 8003d4a:	d916      	bls.n	8003d7a <_malloc_r+0xba>
 8003d4c:	1961      	adds	r1, r4, r5
 8003d4e:	42a3      	cmp	r3, r4
 8003d50:	6025      	str	r5, [r4, #0]
 8003d52:	bf18      	it	ne
 8003d54:	6059      	strne	r1, [r3, #4]
 8003d56:	6863      	ldr	r3, [r4, #4]
 8003d58:	bf08      	it	eq
 8003d5a:	6031      	streq	r1, [r6, #0]
 8003d5c:	5162      	str	r2, [r4, r5]
 8003d5e:	604b      	str	r3, [r1, #4]
 8003d60:	4638      	mov	r0, r7
 8003d62:	f104 060b 	add.w	r6, r4, #11
 8003d66:	f000 f865 	bl	8003e34 <__malloc_unlock>
 8003d6a:	f026 0607 	bic.w	r6, r6, #7
 8003d6e:	1d23      	adds	r3, r4, #4
 8003d70:	1af2      	subs	r2, r6, r3
 8003d72:	d0b6      	beq.n	8003ce2 <_malloc_r+0x22>
 8003d74:	1b9b      	subs	r3, r3, r6
 8003d76:	50a3      	str	r3, [r4, r2]
 8003d78:	e7b3      	b.n	8003ce2 <_malloc_r+0x22>
 8003d7a:	6862      	ldr	r2, [r4, #4]
 8003d7c:	42a3      	cmp	r3, r4
 8003d7e:	bf0c      	ite	eq
 8003d80:	6032      	streq	r2, [r6, #0]
 8003d82:	605a      	strne	r2, [r3, #4]
 8003d84:	e7ec      	b.n	8003d60 <_malloc_r+0xa0>
 8003d86:	4623      	mov	r3, r4
 8003d88:	6864      	ldr	r4, [r4, #4]
 8003d8a:	e7b2      	b.n	8003cf2 <_malloc_r+0x32>
 8003d8c:	4634      	mov	r4, r6
 8003d8e:	6876      	ldr	r6, [r6, #4]
 8003d90:	e7b9      	b.n	8003d06 <_malloc_r+0x46>
 8003d92:	230c      	movs	r3, #12
 8003d94:	4638      	mov	r0, r7
 8003d96:	603b      	str	r3, [r7, #0]
 8003d98:	f000 f84c 	bl	8003e34 <__malloc_unlock>
 8003d9c:	e7a1      	b.n	8003ce2 <_malloc_r+0x22>
 8003d9e:	6025      	str	r5, [r4, #0]
 8003da0:	e7de      	b.n	8003d60 <_malloc_r+0xa0>
 8003da2:	bf00      	nop
 8003da4:	2000022c 	.word	0x2000022c

08003da8 <_realloc_r>:
 8003da8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003dac:	4680      	mov	r8, r0
 8003dae:	4614      	mov	r4, r2
 8003db0:	460e      	mov	r6, r1
 8003db2:	b921      	cbnz	r1, 8003dbe <_realloc_r+0x16>
 8003db4:	4611      	mov	r1, r2
 8003db6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003dba:	f7ff bf81 	b.w	8003cc0 <_malloc_r>
 8003dbe:	b92a      	cbnz	r2, 8003dcc <_realloc_r+0x24>
 8003dc0:	f7ff ff16 	bl	8003bf0 <_free_r>
 8003dc4:	4625      	mov	r5, r4
 8003dc6:	4628      	mov	r0, r5
 8003dc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003dcc:	f000 f838 	bl	8003e40 <_malloc_usable_size_r>
 8003dd0:	4284      	cmp	r4, r0
 8003dd2:	4607      	mov	r7, r0
 8003dd4:	d802      	bhi.n	8003ddc <_realloc_r+0x34>
 8003dd6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003dda:	d812      	bhi.n	8003e02 <_realloc_r+0x5a>
 8003ddc:	4621      	mov	r1, r4
 8003dde:	4640      	mov	r0, r8
 8003de0:	f7ff ff6e 	bl	8003cc0 <_malloc_r>
 8003de4:	4605      	mov	r5, r0
 8003de6:	2800      	cmp	r0, #0
 8003de8:	d0ed      	beq.n	8003dc6 <_realloc_r+0x1e>
 8003dea:	42bc      	cmp	r4, r7
 8003dec:	4622      	mov	r2, r4
 8003dee:	4631      	mov	r1, r6
 8003df0:	bf28      	it	cs
 8003df2:	463a      	movcs	r2, r7
 8003df4:	f7ff fed4 	bl	8003ba0 <memcpy>
 8003df8:	4631      	mov	r1, r6
 8003dfa:	4640      	mov	r0, r8
 8003dfc:	f7ff fef8 	bl	8003bf0 <_free_r>
 8003e00:	e7e1      	b.n	8003dc6 <_realloc_r+0x1e>
 8003e02:	4635      	mov	r5, r6
 8003e04:	e7df      	b.n	8003dc6 <_realloc_r+0x1e>
	...

08003e08 <_sbrk_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	4d05      	ldr	r5, [pc, #20]	; (8003e24 <_sbrk_r+0x1c>)
 8003e0e:	4604      	mov	r4, r0
 8003e10:	4608      	mov	r0, r1
 8003e12:	602b      	str	r3, [r5, #0]
 8003e14:	f7fd f982 	bl	800111c <_sbrk>
 8003e18:	1c43      	adds	r3, r0, #1
 8003e1a:	d102      	bne.n	8003e22 <_sbrk_r+0x1a>
 8003e1c:	682b      	ldr	r3, [r5, #0]
 8003e1e:	b103      	cbz	r3, 8003e22 <_sbrk_r+0x1a>
 8003e20:	6023      	str	r3, [r4, #0]
 8003e22:	bd38      	pop	{r3, r4, r5, pc}
 8003e24:	20000234 	.word	0x20000234

08003e28 <__malloc_lock>:
 8003e28:	4801      	ldr	r0, [pc, #4]	; (8003e30 <__malloc_lock+0x8>)
 8003e2a:	f000 b811 	b.w	8003e50 <__retarget_lock_acquire_recursive>
 8003e2e:	bf00      	nop
 8003e30:	20000238 	.word	0x20000238

08003e34 <__malloc_unlock>:
 8003e34:	4801      	ldr	r0, [pc, #4]	; (8003e3c <__malloc_unlock+0x8>)
 8003e36:	f000 b80c 	b.w	8003e52 <__retarget_lock_release_recursive>
 8003e3a:	bf00      	nop
 8003e3c:	20000238 	.word	0x20000238

08003e40 <_malloc_usable_size_r>:
 8003e40:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e44:	1f18      	subs	r0, r3, #4
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	bfbc      	itt	lt
 8003e4a:	580b      	ldrlt	r3, [r1, r0]
 8003e4c:	18c0      	addlt	r0, r0, r3
 8003e4e:	4770      	bx	lr

08003e50 <__retarget_lock_acquire_recursive>:
 8003e50:	4770      	bx	lr

08003e52 <__retarget_lock_release_recursive>:
 8003e52:	4770      	bx	lr

08003e54 <_init>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr

08003e60 <_fini>:
 8003e60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e62:	bf00      	nop
 8003e64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e66:	bc08      	pop	{r3}
 8003e68:	469e      	mov	lr, r3
 8003e6a:	4770      	bx	lr
